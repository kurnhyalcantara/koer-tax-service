// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"
)

// MockRabbitMqCore is an autogenerated mock type for the RabbitMqCore type
type MockRabbitMqCore struct {
	mock.Mock
}

// BindQueue provides a mock function with no fields
func (_m *MockRabbitMqCore) BindQueue() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BindQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckConnection provides a mock function with no fields
func (_m *MockRabbitMqCore) CheckConnection() chan error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 chan error
	if rf, ok := ret.Get(0).(func() chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// CleanUp provides a mock function with no fields
func (_m *MockRabbitMqCore) CleanUp() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CleanUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseChannel provides a mock function with no fields
func (_m *MockRabbitMqCore) CloseChannel() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with no fields
func (_m *MockRabbitMqCore) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with no fields
func (_m *MockRabbitMqCore) Consume() (<-chan amqp091.Delivery, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 <-chan amqp091.Delivery
	var r1 error
	if rf, ok := ret.Get(0).(func() (<-chan amqp091.Delivery, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() <-chan amqp091.Delivery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp091.Delivery)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with no fields
func (_m *MockRabbitMqCore) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InitChannel provides a mock function with no fields
func (_m *MockRabbitMqCore) InitChannel() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, contentType, qmsg
func (_m *MockRabbitMqCore) Publish(ctx context.Context, contentType string, qmsg []byte) error {
	ret := _m.Called(ctx, contentType, qmsg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, contentType, qmsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reconnect provides a mock function with no fields
func (_m *MockRabbitMqCore) Reconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRabbitMqCore creates a new instance of MockRabbitMqCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRabbitMqCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRabbitMqCore {
	mock := &MockRabbitMqCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
