// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	log "github.com/kurnhyalcantara/koer-tax-service/pkg/log"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockLoggerCore is an autogenerated mock type for the LoggerCore type
type MockLoggerCore struct {
	mock.Mock
}

// Debug provides a mock function with given fields: payload
func (_m *MockLoggerCore) Debug(payload log.LogPayload) {
	_m.Called(payload)
}

// EndTime provides a mock function with no fields
func (_m *MockLoggerCore) EndTime() log.LoggerCore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndTime")
	}

	var r0 log.LoggerCore
	if rf, ok := ret.Get(0).(func() log.LoggerCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerCore)
		}
	}

	return r0
}

// Error provides a mock function with given fields: payload
func (_m *MockLoggerCore) Error(payload log.LogPayload) {
	_m.Called(payload)
}

// Fatal provides a mock function with given fields: payload
func (_m *MockLoggerCore) Fatal(payload log.LogPayload) {
	_m.Called(payload)
}

// Info provides a mock function with given fields: payload
func (_m *MockLoggerCore) Info(payload log.LogPayload) {
	_m.Called(payload)
}

// QueueMessageError provides a mock function with given fields: payload
func (_m *MockLoggerCore) QueueMessageError(payload log.LogPayload) {
	_m.Called(payload)
}

// QueueMessageInfo provides a mock function with given fields: payload
func (_m *MockLoggerCore) QueueMessageInfo(payload log.LogPayload) {
	_m.Called(payload)
}

// Warn provides a mock function with given fields: payload
func (_m *MockLoggerCore) Warn(payload log.LogPayload) {
	_m.Called(payload)
}

// WithFunctionName provides a mock function with given fields: _a0
func (_m *MockLoggerCore) WithFunctionName(_a0 string) log.LoggerCore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithFunctionName")
	}

	var r0 log.LoggerCore
	if rf, ok := ret.Get(0).(func(string) log.LoggerCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerCore)
		}
	}

	return r0
}

// WithProcessId provides a mock function with given fields: _a0
func (_m *MockLoggerCore) WithProcessId(_a0 string) log.LoggerCore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithProcessId")
	}

	var r0 log.LoggerCore
	if rf, ok := ret.Get(0).(func(string) log.LoggerCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerCore)
		}
	}

	return r0
}

// WithStartTime provides a mock function with given fields: _a0
func (_m *MockLoggerCore) WithStartTime(_a0 *time.Time) log.LoggerCore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithStartTime")
	}

	var r0 log.LoggerCore
	if rf, ok := ret.Get(0).(func(*time.Time) log.LoggerCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerCore)
		}
	}

	return r0
}

// WithTaskId provides a mock function with given fields: _a0
func (_m *MockLoggerCore) WithTaskId(_a0 uint64) log.LoggerCore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithTaskId")
	}

	var r0 log.LoggerCore
	if rf, ok := ret.Get(0).(func(uint64) log.LoggerCore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerCore)
		}
	}

	return r0
}

// NewMockLoggerCore creates a new instance of MockLoggerCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggerCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggerCore {
	mock := &MockLoggerCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
