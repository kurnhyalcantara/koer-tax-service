// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domainrescache "github.com/kurnhyalcantara/koer-tax-service/server/domain/rescache"
	mock "github.com/stretchr/testify/mock"
)

// MockResCacheCore is an autogenerated mock type for the ResCacheCore type
type MockResCacheCore struct {
	mock.Mock
}

// DeleteResponse provides a mock function with given fields: ctx, code
func (_m *MockResCacheCore) DeleteResponse(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetResponse provides a mock function with given fields: ctx, code, userId
func (_m *MockResCacheCore) GetResponse(ctx context.Context, code string, userId uint64) (*domainrescache.CacheData, error) {
	ret := _m.Called(ctx, code, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetResponse")
	}

	var r0 *domainrescache.CacheData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) (*domainrescache.CacheData, error)); ok {
		return rf(ctx, code, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) *domainrescache.CacheData); ok {
		r0 = rf(ctx, code, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainrescache.CacheData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, code, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponseWithoutUser provides a mock function with given fields: ctx, code
func (_m *MockResCacheCore) GetResponseWithoutUser(ctx context.Context, code string) (*domainrescache.CacheData, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetResponseWithoutUser")
	}

	var r0 *domainrescache.CacheData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domainrescache.CacheData, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domainrescache.CacheData); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainrescache.CacheData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyGen provides a mock function with given fields: rcode, userId
func (_m *MockResCacheCore) KeyGen(rcode string, userId string) (string, error) {
	ret := _m.Called(rcode, userId)

	if len(ret) == 0 {
		panic("no return value specified for KeyGen")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(rcode, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(rcode, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(rcode, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: ctx, code, userId
func (_m *MockResCacheCore) Start(ctx context.Context, code string, userId uint64) (*domainrescache.CacheData, error) {
	ret := _m.Called(ctx, code, userId)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 *domainrescache.CacheData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) (*domainrescache.CacheData, error)); ok {
		return rf(ctx, code, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) *domainrescache.CacheData); ok {
		r0 = rf(ctx, code, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainrescache.CacheData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, code, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartWithoutUser provides a mock function with given fields: ctx, code
func (_m *MockResCacheCore) StartWithoutUser(ctx context.Context, code string) *domainrescache.CacheData {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for StartWithoutUser")
	}

	var r0 *domainrescache.CacheData
	if rf, ok := ret.Get(0).(func(context.Context, string) *domainrescache.CacheData); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainrescache.CacheData)
		}
	}

	return r0
}

// StoreResponse provides a mock function with given fields: ctx, cacheData
func (_m *MockResCacheCore) StoreResponse(ctx context.Context, cacheData *domainrescache.CacheData) error {
	ret := _m.Called(ctx, cacheData)

	if len(ret) == 0 {
		panic("no return value specified for StoreResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domainrescache.CacheData) error); ok {
		r0 = rf(ctx, cacheData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockResCacheCore creates a new instance of MockResCacheCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResCacheCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResCacheCore {
	mock := &MockResCacheCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
