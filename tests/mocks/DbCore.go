// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockDbCore is an autogenerated mock type for the DbCore type
type MockDbCore struct {
	mock.Mock
}

// AddCounter provides a mock function with no fields
func (_m *MockDbCore) AddCounter() {
	_m.Called()
}

// CheckConnection provides a mock function with no fields
func (_m *MockDbCore) CheckConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClosePmConnection provides a mock function with no fields
func (_m *MockDbCore) ClosePmConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClosePmConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with no fields
func (_m *MockDbCore) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectionDB provides a mock function with no fields
func (_m *MockDbCore) ConnectionDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectionDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDb provides a mock function with no fields
func (_m *MockDbCore) GetDb() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDb")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetDriverName provides a mock function with no fields
func (_m *MockDbCore) GetDriverName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDriverName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTimeout provides a mock function with no fields
func (_m *MockDbCore) GetTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SetMaxIdleConns provides a mock function with given fields: n
func (_m *MockDbCore) SetMaxIdleConns(n int) {
	_m.Called(n)
}

// SetMaxOpenConns provides a mock function with given fields: n
func (_m *MockDbCore) SetMaxOpenConns(n int) {
	_m.Called(n)
}

// StartTransaction provides a mock function with no fields
func (_m *MockDbCore) StartTransaction() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryConnect provides a mock function with no fields
func (_m *MockDbCore) TryConnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TryConnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDbCore creates a new instance of MockDbCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbCore {
	mock := &MockDbCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
