// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	jwt_manager "github.com/kurnhyalcantara/koer-tax-service/server/domain/security/jwt_manager"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/kurnhyalcantara/koer-tax-service/protogen/auth-service"
)

// MockJwtManagerCore is an autogenerated mock type for the JwtManagerCore type
type MockJwtManagerCore struct {
	mock.Mock
}

// GetMeFromAuthService provides a mock function with given fields: ctx, accessToken
func (_m *MockJwtManagerCore) GetMeFromAuthService(ctx context.Context, accessToken string) (*pb.VerifyTokenRes, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMeFromAuthService")
	}

	var r0 *pb.VerifyTokenRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pb.VerifyTokenRes, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pb.VerifyTokenRes); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.VerifyTokenRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeFromMD provides a mock function with given fields: ctx
func (_m *MockJwtManagerCore) GetMeFromMD(ctx context.Context) (*jwt_manager.UserData, metadata.MD, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMeFromMD")
	}

	var r0 *jwt_manager.UserData
	var r1 metadata.MD
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*jwt_manager.UserData, metadata.MD, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *jwt_manager.UserData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt_manager.UserData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) metadata.MD); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(metadata.MD)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Verify provides a mock function with given fields: accessToken
func (_m *MockJwtManagerCore) Verify(accessToken string) (*jwt_manager.UserClaims, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *jwt_manager.UserClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt_manager.UserClaims, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt_manager.UserClaims); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt_manager.UserClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockJwtManagerCore creates a new instance of MockJwtManagerCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwtManagerCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwtManagerCore {
	mock := &MockJwtManagerCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
