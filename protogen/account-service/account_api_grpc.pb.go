// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: account-service/account_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiService_HealthCheck_FullMethodName                              = "/account.service.v1.ApiService/HealthCheck"
	ApiService_GetUserApprovedAndCreated_FullMethodName                = "/account.service.v1.ApiService/GetUserApprovedAndCreated"
	ApiService_DeleteAccountRoleByRoleID_FullMethodName                = "/account.service.v1.ApiService/DeleteAccountRoleByRoleID"
	ApiService_ListAccount_FullMethodName                              = "/account.service.v1.ApiService/ListAccount"
	ApiService_ListAccountHttp_FullMethodName                          = "/account.service.v1.ApiService/ListAccountHttp"
	ApiService_ListAccountByRole_FullMethodName                        = "/account.service.v1.ApiService/ListAccountByRole"
	ApiService_CreateAccount_FullMethodName                            = "/account.service.v1.ApiService/CreateAccount"
	ApiService_DeleteAccount_FullMethodName                            = "/account.service.v1.ApiService/DeleteAccount"
	ApiService_CreateAccountTask_FullMethodName                        = "/account.service.v1.ApiService/CreateAccountTask"
	ApiService_CreateAccountTaskMultiple_FullMethodName                = "/account.service.v1.ApiService/CreateAccountTaskMultiple"
	ApiService_CreateAccountTaskMultipleNoParrent_FullMethodName       = "/account.service.v1.ApiService/CreateAccountTaskMultipleNoParrent"
	ApiService_ListAccountTask_FullMethodName                          = "/account.service.v1.ApiService/ListAccountTask"
	ApiService_ListAccountTaskV2_FullMethodName                        = "/account.service.v1.ApiService/ListAccountTaskV2"
	ApiService_GetAccountTaskByID_FullMethodName                       = "/account.service.v1.ApiService/GetAccountTaskByID"
	ApiService_RequestDeleteAccountTask_FullMethodName                 = "/account.service.v1.ApiService/RequestDeleteAccountTask"
	ApiService_ValidateAccount_FullMethodName                          = "/account.service.v1.ApiService/ValidateAccount"
	ApiService_ValidateAccountHttp_FullMethodName                      = "/account.service.v1.ApiService/ValidateAccountHttp"
	ApiService_ValidateAccountData_FullMethodName                      = "/account.service.v1.ApiService/ValidateAccountData"
	ApiService_ValidateAccountDataWithoutSession_FullMethodName        = "/account.service.v1.ApiService/ValidateAccountDataWithoutSession"
	ApiService_ValidateAccountDataHttp_FullMethodName                  = "/account.service.v1.ApiService/ValidateAccountDataHttp"
	ApiService_ValidateAccountByCIFHttp_FullMethodName                 = "/account.service.v1.ApiService/ValidateAccountByCIFHttp"
	ApiService_ValidateAccountByAccountNumber_FullMethodName           = "/account.service.v1.ApiService/ValidateAccountByAccountNumber"
	ApiService_ValidateAccountByAccountNumberHttp_FullMethodName       = "/account.service.v1.ApiService/ValidateAccountByAccountNumberHttp"
	ApiService_AccountDetail_FullMethodName                            = "/account.service.v1.ApiService/AccountDetail"
	ApiService_AccountDetailAlt_FullMethodName                         = "/account.service.v1.ApiService/AccountDetailAlt"
	ApiService_UpdateAccountRole_FullMethodName                        = "/account.service.v1.ApiService/UpdateAccountRole"
	ApiService_UpdateAccountRoleRPC_FullMethodName                     = "/account.service.v1.ApiService/UpdateAccountRoleRPC"
	ApiService_DownloadListAccountTasks_FullMethodName                 = "/account.service.v1.ApiService/DownloadListAccountTasks"
	ApiService_DownloadTemplate_FullMethodName                         = "/account.service.v1.ApiService/DownloadTemplate"
	ApiService_CekAccountAvaibility_FullMethodName                     = "/account.service.v1.ApiService/CekAccountAvaibility"
	ApiService_CekAccountUsed_FullMethodName                           = "/account.service.v1.ApiService/CekAccountUsed"
	ApiService_QlolaGetListAccountByUserId_FullMethodName              = "/account.service.v1.ApiService/QlolaGetListAccountByUserId"
	ApiService_QlolaGetBankAccountCompany_FullMethodName               = "/account.service.v1.ApiService/QlolaGetBankAccountCompany"
	ApiService_ListAccountByRoleRPC_FullMethodName                     = "/account.service.v1.ApiService/ListAccountByRoleRPC"
	ApiService_ListAccountByRoleRPCWithCache_FullMethodName            = "/account.service.v1.ApiService/ListAccountByRoleRPCWithCache"
	ApiService_ListAccountRPC_FullMethodName                           = "/account.service.v1.ApiService/ListAccountRPC"
	ApiService_ValidateAccountRPC_FullMethodName                       = "/account.service.v1.ApiService/ValidateAccountRPC"
	ApiService_MyAllowedAccount_FullMethodName                         = "/account.service.v1.ApiService/MyAllowedAccount"
	ApiService_MyAllowedAccountByProducts_FullMethodName               = "/account.service.v1.ApiService/MyAllowedAccountByProducts"
	ApiService_ValidateAccountUklnDataHttp_FullMethodName              = "/account.service.v1.ApiService/ValidateAccountUklnDataHttp"
	ApiService_GetBrigateAccessToken_FullMethodName                    = "/account.service.v1.ApiService/GetBrigateAccessToken"
	ApiService_GetToken_FullMethodName                                 = "/account.service.v1.ApiService/GetToken"
	ApiService_InquiryAccount_FullMethodName                           = "/account.service.v1.ApiService/InquiryAccount"
	ApiService_ValidateInquiryAccount_FullMethodName                   = "/account.service.v1.ApiService/ValidateInquiryAccount"
	ApiService_DirectValidateAccountByAccountNumberHttp_FullMethodName = "/account.service.v1.ApiService/DirectValidateAccountByAccountNumberHttp"
	ApiService_ValidateAccountNameAlias_FullMethodName                 = "/account.service.v1.ApiService/ValidateAccountNameAlias"
	ApiService_DirectValidateAccountByAccountNumber_FullMethodName     = "/account.service.v1.ApiService/DirectValidateAccountByAccountNumber"
	ApiService_GetRDNAccount_FullMethodName                            = "/account.service.v1.ApiService/GetRDNAccount"
	ApiService_GetRDNAccountByRole_FullMethodName                      = "/account.service.v1.ApiService/GetRDNAccountByRole"
	ApiService_GetRDNAccountByUserRole_FullMethodName                  = "/account.service.v1.ApiService/GetRDNAccountByUserRole"
	ApiService_ValidateAccountRDN_FullMethodName                       = "/account.service.v1.ApiService/ValidateAccountRDN"
	ApiService_InsertRDNAccount_FullMethodName                         = "/account.service.v1.ApiService/InsertRDNAccount"
	ApiService_GetRDNAccountByRoleRPC_FullMethodName                   = "/account.service.v1.ApiService/GetRDNAccountByRoleRPC"
	ApiService_CreateUpload_FullMethodName                             = "/account.service.v1.ApiService/CreateUpload"
	ApiService_GetListBatch_FullMethodName                             = "/account.service.v1.ApiService/GetListBatch"
	ApiService_CheckDuplicateFilename_FullMethodName                   = "/account.service.v1.ApiService/CheckDuplicateFilename"
	ApiService_GetDetailBatch_FullMethodName                           = "/account.service.v1.ApiService/GetDetailBatch"
	ApiService_GetDetailAccount_FullMethodName                         = "/account.service.v1.ApiService/GetDetailAccount"
	ApiService_GetDetailAccountInvalid_FullMethodName                  = "/account.service.v1.ApiService/GetDetailAccountInvalid"
	ApiService_ApproveBatchAccount_FullMethodName                      = "/account.service.v1.ApiService/ApproveBatchAccount"
	ApiService_CreateAccountBatchTask_FullMethodName                   = "/account.service.v1.ApiService/CreateAccountBatchTask"
	ApiService_DeleteAccountBatch_FullMethodName                       = "/account.service.v1.ApiService/DeleteAccountBatch"
	ApiService_UpdateStatusAccountBatch_FullMethodName                 = "/account.service.v1.ApiService/UpdateStatusAccountBatch"
	ApiService_DownloadAccountBatchFile_FullMethodName                 = "/account.service.v1.ApiService/DownloadAccountBatchFile"
	ApiService_DownloadDetailAccountBatchFile_FullMethodName           = "/account.service.v1.ApiService/DownloadDetailAccountBatchFile"
	ApiService_CreateAccountTaskRPC_FullMethodName                     = "/account.service.v1.ApiService/CreateAccountTaskRPC"
	ApiService_DeleteAccountByCompanyIdRPC_FullMethodName              = "/account.service.v1.ApiService/DeleteAccountByCompanyIdRPC"
	ApiService_GetListAccountRoles_FullMethodName                      = "/account.service.v1.ApiService/GetListAccountRoles"
	ApiService_SendNotificationAccountRPC_FullMethodName               = "/account.service.v1.ApiService/SendNotificationAccountRPC"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetUserApprovedAndCreated(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserApprovedAndCreatedResponse, error)
	DeleteAccountRoleByRoleID(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error)
	ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	ListAccountHttp(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	ListAccountByRole(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	DeleteAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	CreateAccountTask(ctx context.Context, in *CreateAccountTaskRequest, opts ...grpc.CallOption) (*CreateAccountTaskResponse, error)
	CreateAccountTaskMultiple(ctx context.Context, in *CreateAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateAccountTaskResponse, error)
	CreateAccountTaskMultipleNoParrent(ctx context.Context, in *CreateAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateAccountTaskMultipleResponse, error)
	ListAccountTask(ctx context.Context, in *ListAccountTaskRequest, opts ...grpc.CallOption) (*ListAccountTaskResponse, error)
	ListAccountTaskV2(ctx context.Context, in *ListAccountTaskV2Request, opts ...grpc.CallOption) (*ListAccountTaskResponse, error)
	GetAccountTaskByID(ctx context.Context, in *GetAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListAccountTaskResponse, error)
	RequestDeleteAccountTask(ctx context.Context, in *GetAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListAccountTaskResponse, error)
	ValidateAccount(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error)
	ValidateAccountHttp(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error)
	ValidateAccountData(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error)
	ValidateAccountDataWithoutSession(ctx context.Context, in *ValidateAccountWithoutSessionRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error)
	ValidateAccountDataHttp(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error)
	ValidateAccountByCIFHttp(ctx context.Context, in *ValidateAccountByCIFRequest, opts ...grpc.CallOption) (*ValidateAccountByCIFResponse, error)
	ValidateAccountByAccountNumber(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error)
	ValidateAccountByAccountNumberHttp(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error)
	AccountDetail(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	AccountDetailAlt(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error)
	UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error)
	UpdateAccountRoleRPC(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error)
	DownloadListAccountTasks(ctx context.Context, in *FileListAccountTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DownloadTemplate(ctx context.Context, in *FileListTemplateRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	CekAccountAvaibility(ctx context.Context, in *CekAccountAvaibilityReq, opts ...grpc.CallOption) (*CekAccountAvaibilityRes, error)
	CekAccountUsed(ctx context.Context, in *CekAccountAvaibilityReq, opts ...grpc.CallOption) (*CekAccountUsedRes, error)
	QlolaGetListAccountByUserId(ctx context.Context, in *AccountsByUserIdRequest, opts ...grpc.CallOption) (*QlolaListAccountBrigateResponse, error)
	QlolaGetBankAccountCompany(ctx context.Context, in *QlolaGetBankAccountCompanyRequest, opts ...grpc.CallOption) (*QlolaBankAccountCompanyBrigateResponse, error)
	ListAccountByRoleRPC(ctx context.Context, in *ListAccountByRoleRPCRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	ListAccountByRoleRPCWithCache(ctx context.Context, in *ListAccountByRoleRPCWithCacheRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	ListAccountRPC(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error)
	ValidateAccountRPC(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error)
	MyAllowedAccount(ctx context.Context, in *MyAllowedAccountRequest, opts ...grpc.CallOption) (*MyAllowedAccountResponse, error)
	MyAllowedAccountByProducts(ctx context.Context, in *MyAllowedAccountByProductsRequest, opts ...grpc.CallOption) (*MyAllowedAccountByProductsResponse, error)
	// UKLN
	ValidateAccountUklnDataHttp(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountUklnDataResponse, error)
	GetBrigateAccessToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTokenResponse, error)
	GetToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTokenResponse, error)
	InquiryAccount(ctx context.Context, in *InquiryAccountRequest, opts ...grpc.CallOption) (*InquiryAccountData, error)
	ValidateInquiryAccount(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error)
	// Direct Validate Account By Account Number
	DirectValidateAccountByAccountNumberHttp(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error)
	ValidateAccountNameAlias(ctx context.Context, in *ValidateNameAliasAccountRequest, opts ...grpc.CallOption) (*ValidateNameAliasAccountResponse, error)
	// Direct Validate Account Number for Kliring
	DirectValidateAccountByAccountNumber(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error)
	// RDN Account
	GetRDNAccount(ctx context.Context, in *GetRDNAccountRequest, opts ...grpc.CallOption) (*GetRDNAccountResponse, error)
	GetRDNAccountByRole(ctx context.Context, in *GetRDNAccountByRoleRequest, opts ...grpc.CallOption) (*GetRDNAccountByRoleResponse, error)
	GetRDNAccountByUserRole(ctx context.Context, in *GetRDNAccountByUserRoleRequest, opts ...grpc.CallOption) (*GetRDNAccountByUserRoleResponse, error)
	ValidateAccountRDN(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error)
	InsertRDNAccount(ctx context.Context, in *InsertRDNAccountRequest, opts ...grpc.CallOption) (*InsertRDNAccountResponse, error)
	GetRDNAccountByRoleRPC(ctx context.Context, in *GetRDNAccountByRoleRPCRequest, opts ...grpc.CallOption) (*GetRDNAccountByRoleRPCResponse, error)
	CreateUpload(ctx context.Context, in *GlobalRequest, opts ...grpc.CallOption) (*SubmitFileResponse, error)
	GetListBatch(ctx context.Context, in *GetListBatchRequest, opts ...grpc.CallOption) (*GetListBatchResponse, error)
	CheckDuplicateFilename(ctx context.Context, in *CheckFileNameRequest, opts ...grpc.CallOption) (*CheckFileNameResponse, error)
	GetDetailBatch(ctx context.Context, in *GetDetailBatchRequest, opts ...grpc.CallOption) (*GetDetailBatchResponse, error)
	GetDetailAccount(ctx context.Context, in *GetDetailAccountRequest, opts ...grpc.CallOption) (*GetDetailAccountResponse, error)
	GetDetailAccountInvalid(ctx context.Context, in *GetDetailAccountRequest, opts ...grpc.CallOption) (*GetDetailAccountResponse, error)
	ApproveBatchAccount(ctx context.Context, in *ApproveBatchAccountRequest, opts ...grpc.CallOption) (*ApproveBatchAccountResponse, error)
	CreateAccountBatchTask(ctx context.Context, in *ApproveBatchAccountRequest, opts ...grpc.CallOption) (*ApproveBatchAccountResponse, error)
	DeleteAccountBatch(ctx context.Context, in *GetDetailBatchRequest, opts ...grpc.CallOption) (*ApproveBatchAccountResponse, error)
	UpdateStatusAccountBatch(ctx context.Context, in *UpdateStatusAccountBatchRequest, opts ...grpc.CallOption) (*UpdateStatusAccountBatchResponse, error)
	DownloadAccountBatchFile(ctx context.Context, in *GetListBatchRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	DownloadDetailAccountBatchFile(ctx context.Context, in *GetDetailAccountRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	CreateAccountTaskRPC(ctx context.Context, in *CreateAccountTaskRPCRequest, opts ...grpc.CallOption) (*CreateAccountTaskResponse, error)
	DeleteAccountByCompanyIdRPC(ctx context.Context, in *DeleteAccountByCompanyIdRPCRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error)
	GetListAccountRoles(ctx context.Context, in *GetListAccountRolesRequest, opts ...grpc.CallOption) (*GetListAccountRolesResponse, error)
	SendNotificationAccountRPC(ctx context.Context, in *SendNotifQueueRequest, opts ...grpc.CallOption) (*SendNotificationAccountRPCResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ApiService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetUserApprovedAndCreated(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserApprovedAndCreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserApprovedAndCreatedResponse)
	err := c.cc.Invoke(ctx, ApiService_GetUserApprovedAndCreated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteAccountRoleByRoleID(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountRoleResponse)
	err := c.cc.Invoke(ctx, ApiService_DeleteAccountRoleByRoleID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountHttp(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountByRole(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateAccountTask(ctx context.Context, in *CreateAccountTaskRequest, opts ...grpc.CallOption) (*CreateAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateAccountTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateAccountTaskMultiple(ctx context.Context, in *CreateAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateAccountTaskMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateAccountTaskMultipleNoParrent(ctx context.Context, in *CreateAccountTaskBulkRequest, opts ...grpc.CallOption) (*CreateAccountTaskMultipleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountTaskMultipleResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateAccountTaskMultipleNoParrent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountTask(ctx context.Context, in *ListAccountTaskRequest, opts ...grpc.CallOption) (*ListAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountTaskV2(ctx context.Context, in *ListAccountTaskV2Request, opts ...grpc.CallOption) (*ListAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountTaskV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccountTaskByID(ctx context.Context, in *GetAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_GetAccountTaskByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RequestDeleteAccountTask(ctx context.Context, in *GetAccountTaskByIDRequest, opts ...grpc.CallOption) (*ListAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_RequestDeleteAccountTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccount(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountHttp(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountData(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountDataResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountDataWithoutSession(ctx context.Context, in *ValidateAccountWithoutSessionRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountDataResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountDataWithoutSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountDataHttp(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountDataResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountDataHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountByCIFHttp(ctx context.Context, in *ValidateAccountByCIFRequest, opts ...grpc.CallOption) (*ValidateAccountByCIFResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountByCIFResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountByCIFHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountByAccountNumber(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountByAccountNumberResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountByAccountNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountByAccountNumberHttp(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountByAccountNumberResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountByAccountNumberHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AccountDetail(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, ApiService_AccountDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AccountDetailAlt(ctx context.Context, in *AccountDetailRequest, opts ...grpc.CallOption) (*AccountDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDetailResponse)
	err := c.cc.Invoke(ctx, ApiService_AccountDetailAlt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountRoleResponse)
	err := c.cc.Invoke(ctx, ApiService_UpdateAccountRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateAccountRoleRPC(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountRoleResponse)
	err := c.cc.Invoke(ctx, ApiService_UpdateAccountRoleRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadListAccountTasks(ctx context.Context, in *FileListAccountTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ApiService_DownloadListAccountTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadTemplate(ctx context.Context, in *FileListTemplateRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ApiService_DownloadTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CekAccountAvaibility(ctx context.Context, in *CekAccountAvaibilityReq, opts ...grpc.CallOption) (*CekAccountAvaibilityRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CekAccountAvaibilityRes)
	err := c.cc.Invoke(ctx, ApiService_CekAccountAvaibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CekAccountUsed(ctx context.Context, in *CekAccountAvaibilityReq, opts ...grpc.CallOption) (*CekAccountUsedRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CekAccountUsedRes)
	err := c.cc.Invoke(ctx, ApiService_CekAccountUsed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaGetListAccountByUserId(ctx context.Context, in *AccountsByUserIdRequest, opts ...grpc.CallOption) (*QlolaListAccountBrigateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QlolaListAccountBrigateResponse)
	err := c.cc.Invoke(ctx, ApiService_QlolaGetListAccountByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaGetBankAccountCompany(ctx context.Context, in *QlolaGetBankAccountCompanyRequest, opts ...grpc.CallOption) (*QlolaBankAccountCompanyBrigateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QlolaBankAccountCompanyBrigateResponse)
	err := c.cc.Invoke(ctx, ApiService_QlolaGetBankAccountCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountByRoleRPC(ctx context.Context, in *ListAccountByRoleRPCRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountByRoleRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountByRoleRPCWithCache(ctx context.Context, in *ListAccountByRoleRPCWithCacheRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountByRoleRPCWithCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListAccountRPC(ctx context.Context, in *ListAccountRequest, opts ...grpc.CallOption) (*ListAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ListAccountRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountRPC(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MyAllowedAccount(ctx context.Context, in *MyAllowedAccountRequest, opts ...grpc.CallOption) (*MyAllowedAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyAllowedAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_MyAllowedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) MyAllowedAccountByProducts(ctx context.Context, in *MyAllowedAccountByProductsRequest, opts ...grpc.CallOption) (*MyAllowedAccountByProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyAllowedAccountByProductsResponse)
	err := c.cc.Invoke(ctx, ApiService_MyAllowedAccountByProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountUklnDataHttp(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountUklnDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountUklnDataResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountUklnDataHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBrigateAccessToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, ApiService_GetBrigateAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, ApiService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) InquiryAccount(ctx context.Context, in *InquiryAccountRequest, opts ...grpc.CallOption) (*InquiryAccountData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InquiryAccountData)
	err := c.cc.Invoke(ctx, ApiService_InquiryAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateInquiryAccount(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountDataResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateInquiryAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DirectValidateAccountByAccountNumberHttp(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountByAccountNumberResponse)
	err := c.cc.Invoke(ctx, ApiService_DirectValidateAccountByAccountNumberHttp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountNameAlias(ctx context.Context, in *ValidateNameAliasAccountRequest, opts ...grpc.CallOption) (*ValidateNameAliasAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateNameAliasAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountNameAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DirectValidateAccountByAccountNumber(ctx context.Context, in *ValidateAccountByAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountByAccountNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountByAccountNumberResponse)
	err := c.cc.Invoke(ctx, ApiService_DirectValidateAccountByAccountNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRDNAccount(ctx context.Context, in *GetRDNAccountRequest, opts ...grpc.CallOption) (*GetRDNAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRDNAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_GetRDNAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRDNAccountByRole(ctx context.Context, in *GetRDNAccountByRoleRequest, opts ...grpc.CallOption) (*GetRDNAccountByRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRDNAccountByRoleResponse)
	err := c.cc.Invoke(ctx, ApiService_GetRDNAccountByRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRDNAccountByUserRole(ctx context.Context, in *GetRDNAccountByUserRoleRequest, opts ...grpc.CallOption) (*GetRDNAccountByUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRDNAccountByUserRoleResponse)
	err := c.cc.Invoke(ctx, ApiService_GetRDNAccountByUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ValidateAccountRDN(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ValidateAccountRDN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) InsertRDNAccount(ctx context.Context, in *InsertRDNAccountRequest, opts ...grpc.CallOption) (*InsertRDNAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertRDNAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_InsertRDNAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRDNAccountByRoleRPC(ctx context.Context, in *GetRDNAccountByRoleRPCRequest, opts ...grpc.CallOption) (*GetRDNAccountByRoleRPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRDNAccountByRoleRPCResponse)
	err := c.cc.Invoke(ctx, ApiService_GetRDNAccountByRoleRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpload(ctx context.Context, in *GlobalRequest, opts ...grpc.CallOption) (*SubmitFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitFileResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetListBatch(ctx context.Context, in *GetListBatchRequest, opts ...grpc.CallOption) (*GetListBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListBatchResponse)
	err := c.cc.Invoke(ctx, ApiService_GetListBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CheckDuplicateFilename(ctx context.Context, in *CheckFileNameRequest, opts ...grpc.CallOption) (*CheckFileNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckFileNameResponse)
	err := c.cc.Invoke(ctx, ApiService_CheckDuplicateFilename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDetailBatch(ctx context.Context, in *GetDetailBatchRequest, opts ...grpc.CallOption) (*GetDetailBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailBatchResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDetailBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDetailAccount(ctx context.Context, in *GetDetailAccountRequest, opts ...grpc.CallOption) (*GetDetailAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDetailAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDetailAccountInvalid(ctx context.Context, in *GetDetailAccountRequest, opts ...grpc.CallOption) (*GetDetailAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDetailAccountInvalid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ApproveBatchAccount(ctx context.Context, in *ApproveBatchAccountRequest, opts ...grpc.CallOption) (*ApproveBatchAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveBatchAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_ApproveBatchAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateAccountBatchTask(ctx context.Context, in *ApproveBatchAccountRequest, opts ...grpc.CallOption) (*ApproveBatchAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveBatchAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateAccountBatchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteAccountBatch(ctx context.Context, in *GetDetailBatchRequest, opts ...grpc.CallOption) (*ApproveBatchAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveBatchAccountResponse)
	err := c.cc.Invoke(ctx, ApiService_DeleteAccountBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateStatusAccountBatch(ctx context.Context, in *UpdateStatusAccountBatchRequest, opts ...grpc.CallOption) (*UpdateStatusAccountBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusAccountBatchResponse)
	err := c.cc.Invoke(ctx, ApiService_UpdateStatusAccountBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadAccountBatchFile(ctx context.Context, in *GetListBatchRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ApiService_DownloadAccountBatchFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadDetailAccountBatchFile(ctx context.Context, in *GetDetailAccountRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ApiService_DownloadDetailAccountBatchFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateAccountTaskRPC(ctx context.Context, in *CreateAccountTaskRPCRequest, opts ...grpc.CallOption) (*CreateAccountTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountTaskResponse)
	err := c.cc.Invoke(ctx, ApiService_CreateAccountTaskRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteAccountByCompanyIdRPC(ctx context.Context, in *DeleteAccountByCompanyIdRPCRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountRoleResponse)
	err := c.cc.Invoke(ctx, ApiService_DeleteAccountByCompanyIdRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetListAccountRoles(ctx context.Context, in *GetListAccountRolesRequest, opts ...grpc.CallOption) (*GetListAccountRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListAccountRolesResponse)
	err := c.cc.Invoke(ctx, ApiService_GetListAccountRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendNotificationAccountRPC(ctx context.Context, in *SendNotifQueueRequest, opts ...grpc.CallOption) (*SendNotificationAccountRPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationAccountRPCResponse)
	err := c.cc.Invoke(ctx, ApiService_SendNotificationAccountRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility.
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	GetUserApprovedAndCreated(context.Context, *Empty) (*GetUserApprovedAndCreatedResponse, error)
	DeleteAccountRoleByRoleID(context.Context, *DeleteAccountRoleRequest) (*DeleteAccountRoleResponse, error)
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	ListAccountHttp(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	ListAccountByRole(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	DeleteAccount(context.Context, *CreateAccountRequest) (*DeleteAccountResponse, error)
	CreateAccountTask(context.Context, *CreateAccountTaskRequest) (*CreateAccountTaskResponse, error)
	CreateAccountTaskMultiple(context.Context, *CreateAccountTaskBulkRequest) (*CreateAccountTaskResponse, error)
	CreateAccountTaskMultipleNoParrent(context.Context, *CreateAccountTaskBulkRequest) (*CreateAccountTaskMultipleResponse, error)
	ListAccountTask(context.Context, *ListAccountTaskRequest) (*ListAccountTaskResponse, error)
	ListAccountTaskV2(context.Context, *ListAccountTaskV2Request) (*ListAccountTaskResponse, error)
	GetAccountTaskByID(context.Context, *GetAccountTaskByIDRequest) (*ListAccountTaskResponse, error)
	RequestDeleteAccountTask(context.Context, *GetAccountTaskByIDRequest) (*ListAccountTaskResponse, error)
	ValidateAccount(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error)
	ValidateAccountHttp(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error)
	ValidateAccountData(context.Context, *ValidateAccountRequest) (*ValidateAccountDataResponse, error)
	ValidateAccountDataWithoutSession(context.Context, *ValidateAccountWithoutSessionRequest) (*ValidateAccountDataResponse, error)
	ValidateAccountDataHttp(context.Context, *ValidateAccountRequest) (*ValidateAccountDataResponse, error)
	ValidateAccountByCIFHttp(context.Context, *ValidateAccountByCIFRequest) (*ValidateAccountByCIFResponse, error)
	ValidateAccountByAccountNumber(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error)
	ValidateAccountByAccountNumberHttp(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error)
	AccountDetail(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error)
	AccountDetailAlt(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error)
	UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error)
	UpdateAccountRoleRPC(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error)
	DownloadListAccountTasks(context.Context, *FileListAccountTaskRequest) (*httpbody.HttpBody, error)
	DownloadTemplate(context.Context, *FileListTemplateRequest) (*httpbody.HttpBody, error)
	CekAccountAvaibility(context.Context, *CekAccountAvaibilityReq) (*CekAccountAvaibilityRes, error)
	CekAccountUsed(context.Context, *CekAccountAvaibilityReq) (*CekAccountUsedRes, error)
	QlolaGetListAccountByUserId(context.Context, *AccountsByUserIdRequest) (*QlolaListAccountBrigateResponse, error)
	QlolaGetBankAccountCompany(context.Context, *QlolaGetBankAccountCompanyRequest) (*QlolaBankAccountCompanyBrigateResponse, error)
	ListAccountByRoleRPC(context.Context, *ListAccountByRoleRPCRequest) (*ListAccountResponse, error)
	ListAccountByRoleRPCWithCache(context.Context, *ListAccountByRoleRPCWithCacheRequest) (*ListAccountResponse, error)
	ListAccountRPC(context.Context, *ListAccountRequest) (*ListAccountResponse, error)
	ValidateAccountRPC(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error)
	MyAllowedAccount(context.Context, *MyAllowedAccountRequest) (*MyAllowedAccountResponse, error)
	MyAllowedAccountByProducts(context.Context, *MyAllowedAccountByProductsRequest) (*MyAllowedAccountByProductsResponse, error)
	// UKLN
	ValidateAccountUklnDataHttp(context.Context, *ValidateAccountRequest) (*ValidateAccountUklnDataResponse, error)
	GetBrigateAccessToken(context.Context, *Empty) (*GetTokenResponse, error)
	GetToken(context.Context, *Empty) (*GetTokenResponse, error)
	InquiryAccount(context.Context, *InquiryAccountRequest) (*InquiryAccountData, error)
	ValidateInquiryAccount(context.Context, *ValidateAccountRequest) (*ValidateAccountDataResponse, error)
	// Direct Validate Account By Account Number
	DirectValidateAccountByAccountNumberHttp(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error)
	ValidateAccountNameAlias(context.Context, *ValidateNameAliasAccountRequest) (*ValidateNameAliasAccountResponse, error)
	// Direct Validate Account Number for Kliring
	DirectValidateAccountByAccountNumber(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error)
	// RDN Account
	GetRDNAccount(context.Context, *GetRDNAccountRequest) (*GetRDNAccountResponse, error)
	GetRDNAccountByRole(context.Context, *GetRDNAccountByRoleRequest) (*GetRDNAccountByRoleResponse, error)
	GetRDNAccountByUserRole(context.Context, *GetRDNAccountByUserRoleRequest) (*GetRDNAccountByUserRoleResponse, error)
	ValidateAccountRDN(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error)
	InsertRDNAccount(context.Context, *InsertRDNAccountRequest) (*InsertRDNAccountResponse, error)
	GetRDNAccountByRoleRPC(context.Context, *GetRDNAccountByRoleRPCRequest) (*GetRDNAccountByRoleRPCResponse, error)
	CreateUpload(context.Context, *GlobalRequest) (*SubmitFileResponse, error)
	GetListBatch(context.Context, *GetListBatchRequest) (*GetListBatchResponse, error)
	CheckDuplicateFilename(context.Context, *CheckFileNameRequest) (*CheckFileNameResponse, error)
	GetDetailBatch(context.Context, *GetDetailBatchRequest) (*GetDetailBatchResponse, error)
	GetDetailAccount(context.Context, *GetDetailAccountRequest) (*GetDetailAccountResponse, error)
	GetDetailAccountInvalid(context.Context, *GetDetailAccountRequest) (*GetDetailAccountResponse, error)
	ApproveBatchAccount(context.Context, *ApproveBatchAccountRequest) (*ApproveBatchAccountResponse, error)
	CreateAccountBatchTask(context.Context, *ApproveBatchAccountRequest) (*ApproveBatchAccountResponse, error)
	DeleteAccountBatch(context.Context, *GetDetailBatchRequest) (*ApproveBatchAccountResponse, error)
	UpdateStatusAccountBatch(context.Context, *UpdateStatusAccountBatchRequest) (*UpdateStatusAccountBatchResponse, error)
	DownloadAccountBatchFile(context.Context, *GetListBatchRequest) (*httpbody.HttpBody, error)
	DownloadDetailAccountBatchFile(context.Context, *GetDetailAccountRequest) (*httpbody.HttpBody, error)
	CreateAccountTaskRPC(context.Context, *CreateAccountTaskRPCRequest) (*CreateAccountTaskResponse, error)
	DeleteAccountByCompanyIdRPC(context.Context, *DeleteAccountByCompanyIdRPCRequest) (*DeleteAccountRoleResponse, error)
	GetListAccountRoles(context.Context, *GetListAccountRolesRequest) (*GetListAccountRolesResponse, error)
	SendNotificationAccountRPC(context.Context, *SendNotifQueueRequest) (*SendNotificationAccountRPCResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServiceServer struct{}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetUserApprovedAndCreated(context.Context, *Empty) (*GetUserApprovedAndCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserApprovedAndCreated not implemented")
}
func (UnimplementedApiServiceServer) DeleteAccountRoleByRoleID(context.Context, *DeleteAccountRoleRequest) (*DeleteAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountRoleByRoleID not implemented")
}
func (UnimplementedApiServiceServer) ListAccount(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccount not implemented")
}
func (UnimplementedApiServiceServer) ListAccountHttp(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountHttp not implemented")
}
func (UnimplementedApiServiceServer) ListAccountByRole(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountByRole not implemented")
}
func (UnimplementedApiServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedApiServiceServer) DeleteAccount(context.Context, *CreateAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedApiServiceServer) CreateAccountTask(context.Context, *CreateAccountTaskRequest) (*CreateAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountTask not implemented")
}
func (UnimplementedApiServiceServer) CreateAccountTaskMultiple(context.Context, *CreateAccountTaskBulkRequest) (*CreateAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountTaskMultiple not implemented")
}
func (UnimplementedApiServiceServer) CreateAccountTaskMultipleNoParrent(context.Context, *CreateAccountTaskBulkRequest) (*CreateAccountTaskMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountTaskMultipleNoParrent not implemented")
}
func (UnimplementedApiServiceServer) ListAccountTask(context.Context, *ListAccountTaskRequest) (*ListAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountTask not implemented")
}
func (UnimplementedApiServiceServer) ListAccountTaskV2(context.Context, *ListAccountTaskV2Request) (*ListAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountTaskV2 not implemented")
}
func (UnimplementedApiServiceServer) GetAccountTaskByID(context.Context, *GetAccountTaskByIDRequest) (*ListAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTaskByID not implemented")
}
func (UnimplementedApiServiceServer) RequestDeleteAccountTask(context.Context, *GetAccountTaskByIDRequest) (*ListAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDeleteAccountTask not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccount(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccount not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountHttp(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountHttp not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountData(context.Context, *ValidateAccountRequest) (*ValidateAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountData not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountDataWithoutSession(context.Context, *ValidateAccountWithoutSessionRequest) (*ValidateAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountDataWithoutSession not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountDataHttp(context.Context, *ValidateAccountRequest) (*ValidateAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountDataHttp not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountByCIFHttp(context.Context, *ValidateAccountByCIFRequest) (*ValidateAccountByCIFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountByCIFHttp not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountByAccountNumber(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountByAccountNumber not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountByAccountNumberHttp(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountByAccountNumberHttp not implemented")
}
func (UnimplementedApiServiceServer) AccountDetail(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDetail not implemented")
}
func (UnimplementedApiServiceServer) AccountDetailAlt(context.Context, *AccountDetailRequest) (*AccountDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDetailAlt not implemented")
}
func (UnimplementedApiServiceServer) UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountRole not implemented")
}
func (UnimplementedApiServiceServer) UpdateAccountRoleRPC(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountRoleRPC not implemented")
}
func (UnimplementedApiServiceServer) DownloadListAccountTasks(context.Context, *FileListAccountTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListAccountTasks not implemented")
}
func (UnimplementedApiServiceServer) DownloadTemplate(context.Context, *FileListTemplateRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTemplate not implemented")
}
func (UnimplementedApiServiceServer) CekAccountAvaibility(context.Context, *CekAccountAvaibilityReq) (*CekAccountAvaibilityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CekAccountAvaibility not implemented")
}
func (UnimplementedApiServiceServer) CekAccountUsed(context.Context, *CekAccountAvaibilityReq) (*CekAccountUsedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CekAccountUsed not implemented")
}
func (UnimplementedApiServiceServer) QlolaGetListAccountByUserId(context.Context, *AccountsByUserIdRequest) (*QlolaListAccountBrigateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaGetListAccountByUserId not implemented")
}
func (UnimplementedApiServiceServer) QlolaGetBankAccountCompany(context.Context, *QlolaGetBankAccountCompanyRequest) (*QlolaBankAccountCompanyBrigateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaGetBankAccountCompany not implemented")
}
func (UnimplementedApiServiceServer) ListAccountByRoleRPC(context.Context, *ListAccountByRoleRPCRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountByRoleRPC not implemented")
}
func (UnimplementedApiServiceServer) ListAccountByRoleRPCWithCache(context.Context, *ListAccountByRoleRPCWithCacheRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountByRoleRPCWithCache not implemented")
}
func (UnimplementedApiServiceServer) ListAccountRPC(context.Context, *ListAccountRequest) (*ListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountRPC not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountRPC(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountRPC not implemented")
}
func (UnimplementedApiServiceServer) MyAllowedAccount(context.Context, *MyAllowedAccountRequest) (*MyAllowedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyAllowedAccount not implemented")
}
func (UnimplementedApiServiceServer) MyAllowedAccountByProducts(context.Context, *MyAllowedAccountByProductsRequest) (*MyAllowedAccountByProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyAllowedAccountByProducts not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountUklnDataHttp(context.Context, *ValidateAccountRequest) (*ValidateAccountUklnDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountUklnDataHttp not implemented")
}
func (UnimplementedApiServiceServer) GetBrigateAccessToken(context.Context, *Empty) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrigateAccessToken not implemented")
}
func (UnimplementedApiServiceServer) GetToken(context.Context, *Empty) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedApiServiceServer) InquiryAccount(context.Context, *InquiryAccountRequest) (*InquiryAccountData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquiryAccount not implemented")
}
func (UnimplementedApiServiceServer) ValidateInquiryAccount(context.Context, *ValidateAccountRequest) (*ValidateAccountDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInquiryAccount not implemented")
}
func (UnimplementedApiServiceServer) DirectValidateAccountByAccountNumberHttp(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectValidateAccountByAccountNumberHttp not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountNameAlias(context.Context, *ValidateNameAliasAccountRequest) (*ValidateNameAliasAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountNameAlias not implemented")
}
func (UnimplementedApiServiceServer) DirectValidateAccountByAccountNumber(context.Context, *ValidateAccountByAccountNumberRequest) (*ValidateAccountByAccountNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectValidateAccountByAccountNumber not implemented")
}
func (UnimplementedApiServiceServer) GetRDNAccount(context.Context, *GetRDNAccountRequest) (*GetRDNAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDNAccount not implemented")
}
func (UnimplementedApiServiceServer) GetRDNAccountByRole(context.Context, *GetRDNAccountByRoleRequest) (*GetRDNAccountByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDNAccountByRole not implemented")
}
func (UnimplementedApiServiceServer) GetRDNAccountByUserRole(context.Context, *GetRDNAccountByUserRoleRequest) (*GetRDNAccountByUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDNAccountByUserRole not implemented")
}
func (UnimplementedApiServiceServer) ValidateAccountRDN(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountRDN not implemented")
}
func (UnimplementedApiServiceServer) InsertRDNAccount(context.Context, *InsertRDNAccountRequest) (*InsertRDNAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRDNAccount not implemented")
}
func (UnimplementedApiServiceServer) GetRDNAccountByRoleRPC(context.Context, *GetRDNAccountByRoleRPCRequest) (*GetRDNAccountByRoleRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDNAccountByRoleRPC not implemented")
}
func (UnimplementedApiServiceServer) CreateUpload(context.Context, *GlobalRequest) (*SubmitFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedApiServiceServer) GetListBatch(context.Context, *GetListBatchRequest) (*GetListBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListBatch not implemented")
}
func (UnimplementedApiServiceServer) CheckDuplicateFilename(context.Context, *CheckFileNameRequest) (*CheckFileNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDuplicateFilename not implemented")
}
func (UnimplementedApiServiceServer) GetDetailBatch(context.Context, *GetDetailBatchRequest) (*GetDetailBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailBatch not implemented")
}
func (UnimplementedApiServiceServer) GetDetailAccount(context.Context, *GetDetailAccountRequest) (*GetDetailAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailAccount not implemented")
}
func (UnimplementedApiServiceServer) GetDetailAccountInvalid(context.Context, *GetDetailAccountRequest) (*GetDetailAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailAccountInvalid not implemented")
}
func (UnimplementedApiServiceServer) ApproveBatchAccount(context.Context, *ApproveBatchAccountRequest) (*ApproveBatchAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBatchAccount not implemented")
}
func (UnimplementedApiServiceServer) CreateAccountBatchTask(context.Context, *ApproveBatchAccountRequest) (*ApproveBatchAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountBatchTask not implemented")
}
func (UnimplementedApiServiceServer) DeleteAccountBatch(context.Context, *GetDetailBatchRequest) (*ApproveBatchAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountBatch not implemented")
}
func (UnimplementedApiServiceServer) UpdateStatusAccountBatch(context.Context, *UpdateStatusAccountBatchRequest) (*UpdateStatusAccountBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusAccountBatch not implemented")
}
func (UnimplementedApiServiceServer) DownloadAccountBatchFile(context.Context, *GetListBatchRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAccountBatchFile not implemented")
}
func (UnimplementedApiServiceServer) DownloadDetailAccountBatchFile(context.Context, *GetDetailAccountRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDetailAccountBatchFile not implemented")
}
func (UnimplementedApiServiceServer) CreateAccountTaskRPC(context.Context, *CreateAccountTaskRPCRequest) (*CreateAccountTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountTaskRPC not implemented")
}
func (UnimplementedApiServiceServer) DeleteAccountByCompanyIdRPC(context.Context, *DeleteAccountByCompanyIdRPCRequest) (*DeleteAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountByCompanyIdRPC not implemented")
}
func (UnimplementedApiServiceServer) GetListAccountRoles(context.Context, *GetListAccountRolesRequest) (*GetListAccountRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAccountRoles not implemented")
}
func (UnimplementedApiServiceServer) SendNotificationAccountRPC(context.Context, *SendNotifQueueRequest) (*SendNotificationAccountRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationAccountRPC not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}
func (UnimplementedApiServiceServer) testEmbeddedByValue()                    {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetUserApprovedAndCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetUserApprovedAndCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetUserApprovedAndCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetUserApprovedAndCreated(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteAccountRoleByRoleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteAccountRoleByRoleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteAccountRoleByRoleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteAccountRoleByRoleID(ctx, req.(*DeleteAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccount(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountHttp(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountByRole(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateAccountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateAccountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateAccountTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateAccountTask(ctx, req.(*CreateAccountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateAccountTaskMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTaskBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateAccountTaskMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateAccountTaskMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateAccountTaskMultiple(ctx, req.(*CreateAccountTaskBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateAccountTaskMultipleNoParrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTaskBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateAccountTaskMultipleNoParrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateAccountTaskMultipleNoParrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateAccountTaskMultipleNoParrent(ctx, req.(*CreateAccountTaskBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountTask(ctx, req.(*ListAccountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountTaskV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountTaskV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountTaskV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountTaskV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountTaskV2(ctx, req.(*ListAccountTaskV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccountTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetAccountTaskByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountTaskByID(ctx, req.(*GetAccountTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RequestDeleteAccountTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RequestDeleteAccountTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RequestDeleteAccountTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RequestDeleteAccountTask(ctx, req.(*GetAccountTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccount(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountHttp(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountData(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountDataWithoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountWithoutSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountDataWithoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountDataWithoutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountDataWithoutSession(ctx, req.(*ValidateAccountWithoutSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountDataHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountDataHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountDataHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountDataHttp(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountByCIFHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountByCIFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountByCIFHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountByCIFHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountByCIFHttp(ctx, req.(*ValidateAccountByCIFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountByAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountByAccountNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountByAccountNumber(ctx, req.(*ValidateAccountByAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountByAccountNumberHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountByAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountByAccountNumberHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountByAccountNumberHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountByAccountNumberHttp(ctx, req.(*ValidateAccountByAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AccountDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AccountDetail(ctx, req.(*AccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AccountDetailAlt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AccountDetailAlt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AccountDetailAlt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AccountDetailAlt(ctx, req.(*AccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateAccountRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateAccountRole(ctx, req.(*UpdateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateAccountRoleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateAccountRoleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateAccountRoleRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateAccountRoleRPC(ctx, req.(*UpdateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadListAccountTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListAccountTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadListAccountTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DownloadListAccountTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadListAccountTasks(ctx, req.(*FileListAccountTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DownloadTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadTemplate(ctx, req.(*FileListTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CekAccountAvaibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CekAccountAvaibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CekAccountAvaibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CekAccountAvaibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CekAccountAvaibility(ctx, req.(*CekAccountAvaibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CekAccountUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CekAccountAvaibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CekAccountUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CekAccountUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CekAccountUsed(ctx, req.(*CekAccountAvaibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaGetListAccountByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaGetListAccountByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaGetListAccountByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaGetListAccountByUserId(ctx, req.(*AccountsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaGetBankAccountCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QlolaGetBankAccountCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaGetBankAccountCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaGetBankAccountCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaGetBankAccountCompany(ctx, req.(*QlolaGetBankAccountCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountByRoleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountByRoleRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountByRoleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountByRoleRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountByRoleRPC(ctx, req.(*ListAccountByRoleRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountByRoleRPCWithCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountByRoleRPCWithCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountByRoleRPCWithCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountByRoleRPCWithCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountByRoleRPCWithCache(ctx, req.(*ListAccountByRoleRPCWithCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListAccountRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListAccountRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListAccountRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListAccountRPC(ctx, req.(*ListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountRPC(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MyAllowedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAllowedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MyAllowedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_MyAllowedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MyAllowedAccount(ctx, req.(*MyAllowedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_MyAllowedAccountByProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAllowedAccountByProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).MyAllowedAccountByProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_MyAllowedAccountByProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).MyAllowedAccountByProducts(ctx, req.(*MyAllowedAccountByProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountUklnDataHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountUklnDataHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountUklnDataHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountUklnDataHttp(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBrigateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBrigateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBrigateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBrigateAccessToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_InquiryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquiryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).InquiryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_InquiryAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).InquiryAccount(ctx, req.(*InquiryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateInquiryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateInquiryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateInquiryAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateInquiryAccount(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DirectValidateAccountByAccountNumberHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountByAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DirectValidateAccountByAccountNumberHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DirectValidateAccountByAccountNumberHttp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DirectValidateAccountByAccountNumberHttp(ctx, req.(*ValidateAccountByAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountNameAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNameAliasAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountNameAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountNameAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountNameAlias(ctx, req.(*ValidateNameAliasAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DirectValidateAccountByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountByAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DirectValidateAccountByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DirectValidateAccountByAccountNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DirectValidateAccountByAccountNumber(ctx, req.(*ValidateAccountByAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRDNAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRDNAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRDNAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetRDNAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRDNAccount(ctx, req.(*GetRDNAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRDNAccountByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRDNAccountByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRDNAccountByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetRDNAccountByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRDNAccountByRole(ctx, req.(*GetRDNAccountByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRDNAccountByUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRDNAccountByUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRDNAccountByUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetRDNAccountByUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRDNAccountByUserRole(ctx, req.(*GetRDNAccountByUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ValidateAccountRDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ValidateAccountRDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ValidateAccountRDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ValidateAccountRDN(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_InsertRDNAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRDNAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).InsertRDNAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_InsertRDNAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).InsertRDNAccount(ctx, req.(*InsertRDNAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRDNAccountByRoleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRDNAccountByRoleRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRDNAccountByRoleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetRDNAccountByRoleRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRDNAccountByRoleRPC(ctx, req.(*GetRDNAccountByRoleRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpload(ctx, req.(*GlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetListBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetListBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetListBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetListBatch(ctx, req.(*GetListBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CheckDuplicateFilename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CheckDuplicateFilename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CheckDuplicateFilename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CheckDuplicateFilename(ctx, req.(*CheckFileNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDetailBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDetailBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDetailBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDetailBatch(ctx, req.(*GetDetailBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDetailAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDetailAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDetailAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDetailAccount(ctx, req.(*GetDetailAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDetailAccountInvalid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDetailAccountInvalid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDetailAccountInvalid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDetailAccountInvalid(ctx, req.(*GetDetailAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ApproveBatchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBatchAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ApproveBatchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ApproveBatchAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ApproveBatchAccount(ctx, req.(*ApproveBatchAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateAccountBatchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBatchAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateAccountBatchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateAccountBatchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateAccountBatchTask(ctx, req.(*ApproveBatchAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteAccountBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteAccountBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteAccountBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteAccountBatch(ctx, req.(*GetDetailBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateStatusAccountBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusAccountBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateStatusAccountBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateStatusAccountBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateStatusAccountBatch(ctx, req.(*UpdateStatusAccountBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadAccountBatchFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadAccountBatchFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DownloadAccountBatchFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadAccountBatchFile(ctx, req.(*GetListBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadDetailAccountBatchFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadDetailAccountBatchFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DownloadDetailAccountBatchFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadDetailAccountBatchFile(ctx, req.(*GetDetailAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateAccountTaskRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTaskRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateAccountTaskRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateAccountTaskRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateAccountTaskRPC(ctx, req.(*CreateAccountTaskRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteAccountByCompanyIdRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByCompanyIdRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteAccountByCompanyIdRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteAccountByCompanyIdRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteAccountByCompanyIdRPC(ctx, req.(*DeleteAccountByCompanyIdRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetListAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAccountRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetListAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetListAccountRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetListAccountRoles(ctx, req.(*GetListAccountRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendNotificationAccountRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotifQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendNotificationAccountRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SendNotificationAccountRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendNotificationAccountRPC(ctx, req.(*SendNotifQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetUserApprovedAndCreated",
			Handler:    _ApiService_GetUserApprovedAndCreated_Handler,
		},
		{
			MethodName: "DeleteAccountRoleByRoleID",
			Handler:    _ApiService_DeleteAccountRoleByRoleID_Handler,
		},
		{
			MethodName: "ListAccount",
			Handler:    _ApiService_ListAccount_Handler,
		},
		{
			MethodName: "ListAccountHttp",
			Handler:    _ApiService_ListAccountHttp_Handler,
		},
		{
			MethodName: "ListAccountByRole",
			Handler:    _ApiService_ListAccountByRole_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ApiService_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _ApiService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateAccountTask",
			Handler:    _ApiService_CreateAccountTask_Handler,
		},
		{
			MethodName: "CreateAccountTaskMultiple",
			Handler:    _ApiService_CreateAccountTaskMultiple_Handler,
		},
		{
			MethodName: "CreateAccountTaskMultipleNoParrent",
			Handler:    _ApiService_CreateAccountTaskMultipleNoParrent_Handler,
		},
		{
			MethodName: "ListAccountTask",
			Handler:    _ApiService_ListAccountTask_Handler,
		},
		{
			MethodName: "ListAccountTaskV2",
			Handler:    _ApiService_ListAccountTaskV2_Handler,
		},
		{
			MethodName: "GetAccountTaskByID",
			Handler:    _ApiService_GetAccountTaskByID_Handler,
		},
		{
			MethodName: "RequestDeleteAccountTask",
			Handler:    _ApiService_RequestDeleteAccountTask_Handler,
		},
		{
			MethodName: "ValidateAccount",
			Handler:    _ApiService_ValidateAccount_Handler,
		},
		{
			MethodName: "ValidateAccountHttp",
			Handler:    _ApiService_ValidateAccountHttp_Handler,
		},
		{
			MethodName: "ValidateAccountData",
			Handler:    _ApiService_ValidateAccountData_Handler,
		},
		{
			MethodName: "ValidateAccountDataWithoutSession",
			Handler:    _ApiService_ValidateAccountDataWithoutSession_Handler,
		},
		{
			MethodName: "ValidateAccountDataHttp",
			Handler:    _ApiService_ValidateAccountDataHttp_Handler,
		},
		{
			MethodName: "ValidateAccountByCIFHttp",
			Handler:    _ApiService_ValidateAccountByCIFHttp_Handler,
		},
		{
			MethodName: "ValidateAccountByAccountNumber",
			Handler:    _ApiService_ValidateAccountByAccountNumber_Handler,
		},
		{
			MethodName: "ValidateAccountByAccountNumberHttp",
			Handler:    _ApiService_ValidateAccountByAccountNumberHttp_Handler,
		},
		{
			MethodName: "AccountDetail",
			Handler:    _ApiService_AccountDetail_Handler,
		},
		{
			MethodName: "AccountDetailAlt",
			Handler:    _ApiService_AccountDetailAlt_Handler,
		},
		{
			MethodName: "UpdateAccountRole",
			Handler:    _ApiService_UpdateAccountRole_Handler,
		},
		{
			MethodName: "UpdateAccountRoleRPC",
			Handler:    _ApiService_UpdateAccountRoleRPC_Handler,
		},
		{
			MethodName: "DownloadListAccountTasks",
			Handler:    _ApiService_DownloadListAccountTasks_Handler,
		},
		{
			MethodName: "DownloadTemplate",
			Handler:    _ApiService_DownloadTemplate_Handler,
		},
		{
			MethodName: "CekAccountAvaibility",
			Handler:    _ApiService_CekAccountAvaibility_Handler,
		},
		{
			MethodName: "CekAccountUsed",
			Handler:    _ApiService_CekAccountUsed_Handler,
		},
		{
			MethodName: "QlolaGetListAccountByUserId",
			Handler:    _ApiService_QlolaGetListAccountByUserId_Handler,
		},
		{
			MethodName: "QlolaGetBankAccountCompany",
			Handler:    _ApiService_QlolaGetBankAccountCompany_Handler,
		},
		{
			MethodName: "ListAccountByRoleRPC",
			Handler:    _ApiService_ListAccountByRoleRPC_Handler,
		},
		{
			MethodName: "ListAccountByRoleRPCWithCache",
			Handler:    _ApiService_ListAccountByRoleRPCWithCache_Handler,
		},
		{
			MethodName: "ListAccountRPC",
			Handler:    _ApiService_ListAccountRPC_Handler,
		},
		{
			MethodName: "ValidateAccountRPC",
			Handler:    _ApiService_ValidateAccountRPC_Handler,
		},
		{
			MethodName: "MyAllowedAccount",
			Handler:    _ApiService_MyAllowedAccount_Handler,
		},
		{
			MethodName: "MyAllowedAccountByProducts",
			Handler:    _ApiService_MyAllowedAccountByProducts_Handler,
		},
		{
			MethodName: "ValidateAccountUklnDataHttp",
			Handler:    _ApiService_ValidateAccountUklnDataHttp_Handler,
		},
		{
			MethodName: "GetBrigateAccessToken",
			Handler:    _ApiService_GetBrigateAccessToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _ApiService_GetToken_Handler,
		},
		{
			MethodName: "InquiryAccount",
			Handler:    _ApiService_InquiryAccount_Handler,
		},
		{
			MethodName: "ValidateInquiryAccount",
			Handler:    _ApiService_ValidateInquiryAccount_Handler,
		},
		{
			MethodName: "DirectValidateAccountByAccountNumberHttp",
			Handler:    _ApiService_DirectValidateAccountByAccountNumberHttp_Handler,
		},
		{
			MethodName: "ValidateAccountNameAlias",
			Handler:    _ApiService_ValidateAccountNameAlias_Handler,
		},
		{
			MethodName: "DirectValidateAccountByAccountNumber",
			Handler:    _ApiService_DirectValidateAccountByAccountNumber_Handler,
		},
		{
			MethodName: "GetRDNAccount",
			Handler:    _ApiService_GetRDNAccount_Handler,
		},
		{
			MethodName: "GetRDNAccountByRole",
			Handler:    _ApiService_GetRDNAccountByRole_Handler,
		},
		{
			MethodName: "GetRDNAccountByUserRole",
			Handler:    _ApiService_GetRDNAccountByUserRole_Handler,
		},
		{
			MethodName: "ValidateAccountRDN",
			Handler:    _ApiService_ValidateAccountRDN_Handler,
		},
		{
			MethodName: "InsertRDNAccount",
			Handler:    _ApiService_InsertRDNAccount_Handler,
		},
		{
			MethodName: "GetRDNAccountByRoleRPC",
			Handler:    _ApiService_GetRDNAccountByRoleRPC_Handler,
		},
		{
			MethodName: "CreateUpload",
			Handler:    _ApiService_CreateUpload_Handler,
		},
		{
			MethodName: "GetListBatch",
			Handler:    _ApiService_GetListBatch_Handler,
		},
		{
			MethodName: "CheckDuplicateFilename",
			Handler:    _ApiService_CheckDuplicateFilename_Handler,
		},
		{
			MethodName: "GetDetailBatch",
			Handler:    _ApiService_GetDetailBatch_Handler,
		},
		{
			MethodName: "GetDetailAccount",
			Handler:    _ApiService_GetDetailAccount_Handler,
		},
		{
			MethodName: "GetDetailAccountInvalid",
			Handler:    _ApiService_GetDetailAccountInvalid_Handler,
		},
		{
			MethodName: "ApproveBatchAccount",
			Handler:    _ApiService_ApproveBatchAccount_Handler,
		},
		{
			MethodName: "CreateAccountBatchTask",
			Handler:    _ApiService_CreateAccountBatchTask_Handler,
		},
		{
			MethodName: "DeleteAccountBatch",
			Handler:    _ApiService_DeleteAccountBatch_Handler,
		},
		{
			MethodName: "UpdateStatusAccountBatch",
			Handler:    _ApiService_UpdateStatusAccountBatch_Handler,
		},
		{
			MethodName: "DownloadAccountBatchFile",
			Handler:    _ApiService_DownloadAccountBatchFile_Handler,
		},
		{
			MethodName: "DownloadDetailAccountBatchFile",
			Handler:    _ApiService_DownloadDetailAccountBatchFile_Handler,
		},
		{
			MethodName: "CreateAccountTaskRPC",
			Handler:    _ApiService_CreateAccountTaskRPC_Handler,
		},
		{
			MethodName: "DeleteAccountByCompanyIdRPC",
			Handler:    _ApiService_DeleteAccountByCompanyIdRPC_Handler,
		},
		{
			MethodName: "GetListAccountRoles",
			Handler:    _ApiService_GetListAccountRoles_Handler,
		},
		{
			MethodName: "SendNotificationAccountRPC",
			Handler:    _ApiService_SendNotificationAccountRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account-service/account_api.proto",
}
