// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: registration-online-service/registration_online_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegistrationOnlineService_InsertNewRegol_FullMethodName = "/registration_online.service.v1.RegistrationOnlineService/InsertNewRegol"
)

// RegistrationOnlineServiceClient is the client API for RegistrationOnlineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Generated according to https://cloud.google.com/apis/design/standard_methods
type RegistrationOnlineServiceClient interface {
	InsertNewRegol(ctx context.Context, in *GeneralBodyRequest, opts ...grpc.CallOption) (*GeneralBodyResponse, error)
}

type registrationOnlineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationOnlineServiceClient(cc grpc.ClientConnInterface) RegistrationOnlineServiceClient {
	return &registrationOnlineServiceClient{cc}
}

func (c *registrationOnlineServiceClient) InsertNewRegol(ctx context.Context, in *GeneralBodyRequest, opts ...grpc.CallOption) (*GeneralBodyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralBodyResponse)
	err := c.cc.Invoke(ctx, RegistrationOnlineService_InsertNewRegol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationOnlineServiceServer is the server API for RegistrationOnlineService service.
// All implementations must embed UnimplementedRegistrationOnlineServiceServer
// for forward compatibility.
//
// Generated according to https://cloud.google.com/apis/design/standard_methods
type RegistrationOnlineServiceServer interface {
	InsertNewRegol(context.Context, *GeneralBodyRequest) (*GeneralBodyResponse, error)
	mustEmbedUnimplementedRegistrationOnlineServiceServer()
}

// UnimplementedRegistrationOnlineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistrationOnlineServiceServer struct{}

func (UnimplementedRegistrationOnlineServiceServer) InsertNewRegol(context.Context, *GeneralBodyRequest) (*GeneralBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNewRegol not implemented")
}
func (UnimplementedRegistrationOnlineServiceServer) mustEmbedUnimplementedRegistrationOnlineServiceServer() {
}
func (UnimplementedRegistrationOnlineServiceServer) testEmbeddedByValue() {}

// UnsafeRegistrationOnlineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationOnlineServiceServer will
// result in compilation errors.
type UnsafeRegistrationOnlineServiceServer interface {
	mustEmbedUnimplementedRegistrationOnlineServiceServer()
}

func RegisterRegistrationOnlineServiceServer(s grpc.ServiceRegistrar, srv RegistrationOnlineServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistrationOnlineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistrationOnlineService_ServiceDesc, srv)
}

func _RegistrationOnlineService_InsertNewRegol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationOnlineServiceServer).InsertNewRegol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationOnlineService_InsertNewRegol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationOnlineServiceServer).InsertNewRegol(ctx, req.(*GeneralBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistrationOnlineService_ServiceDesc is the grpc.ServiceDesc for RegistrationOnlineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistrationOnlineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registration_online.service.v1.RegistrationOnlineService",
	HandlerType: (*RegistrationOnlineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertNewRegol",
			Handler:    _RegistrationOnlineService_InsertNewRegol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration-online-service/registration_online_api.proto",
}
