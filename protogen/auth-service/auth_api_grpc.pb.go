// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: auth-service/auth_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiService_HealthCheck_FullMethodName                                    = "/auth.service.v1.ApiService/HealthCheck"
	ApiService_GetSignatureKey_FullMethodName                                = "/auth.service.v1.ApiService/GetSignatureKey"
	ApiService_Login_FullMethodName                                          = "/auth.service.v1.ApiService/Login"
	ApiService_Logout_FullMethodName                                         = "/auth.service.v1.ApiService/Logout"
	ApiService_RefreshToken_FullMethodName                                   = "/auth.service.v1.ApiService/RefreshToken"
	ApiService_GetTokenData_FullMethodName                                   = "/auth.service.v1.ApiService/GetTokenData"
	ApiService_DeleteAccessTokenWhenCompanyOrUserStatusChange_FullMethodName = "/auth.service.v1.ApiService/DeleteAccessTokenWhenCompanyOrUserStatusChange"
	ApiService_VerifyToken_FullMethodName                                    = "/auth.service.v1.ApiService/VerifyToken"
	ApiService_SetMe_FullMethodName                                          = "/auth.service.v1.ApiService/SetMe"
	ApiService_GetMe_FullMethodName                                          = "/auth.service.v1.ApiService/GetMe"
	ApiService_GetTokenBySession_FullMethodName                              = "/auth.service.v1.ApiService/GetTokenBySession"
	ApiService_BricamsVerify_FullMethodName                                  = "/auth.service.v1.ApiService/BricamsVerify"
	ApiService_BricamsLogin_FullMethodName                                   = "/auth.service.v1.ApiService/BricamsLogin"
	ApiService_QlolaLogin_FullMethodName                                     = "/auth.service.v1.ApiService/QlolaLogin"
	ApiService_QlolaLoginV2_FullMethodName                                   = "/auth.service.v1.ApiService/QlolaLoginV2"
	ApiService_SSOLoginWithInitToken_FullMethodName                          = "/auth.service.v1.ApiService/SSOLoginWithInitToken"
	ApiService_QlolaLogout_FullMethodName                                    = "/auth.service.v1.ApiService/QlolaLogout"
	ApiService_LoginV2_FullMethodName                                        = "/auth.service.v1.ApiService/LoginV2"
	ApiService_VerifyUserQuestion_FullMethodName                             = "/auth.service.v1.ApiService/VerifyUserQuestion"
	ApiService_VerifyChangePasswordToken_FullMethodName                      = "/auth.service.v1.ApiService/VerifyChangePasswordToken"
	ApiService_ForgotPassword_FullMethodName                                 = "/auth.service.v1.ApiService/ForgotPassword"
	ApiService_ChangePassword_FullMethodName                                 = "/auth.service.v1.ApiService/ChangePassword"
	ApiService_QlolaTestGenerateSignature_FullMethodName                     = "/auth.service.v1.ApiService/QlolaTestGenerateSignature"
	ApiService_QlolaTestSignatureBystring_FullMethodName                     = "/auth.service.v1.ApiService/QlolaTestSignatureBystring"
	ApiService_ResetUserLoginTimeAttemptByUserId_FullMethodName              = "/auth.service.v1.ApiService/ResetUserLoginTimeAttemptByUserId"
	ApiService_RegisterUserIntoAuth_FullMethodName                           = "/auth.service.v1.ApiService/RegisterUserIntoAuth"
	ApiService_RequestAuthData_FullMethodName                                = "/auth.service.v1.ApiService/RequestAuthData"
	ApiService_ChangePasswordWithProfile_FullMethodName                      = "/auth.service.v1.ApiService/ChangePasswordWithProfile"
	ApiService_RegisterAddonsUserIntoAuth_FullMethodName                     = "/auth.service.v1.ApiService/RegisterAddonsUserIntoAuth"
	ApiService_QLolaUserValidation_FullMethodName                            = "/auth.service.v1.ApiService/QLolaUserValidation"
	ApiService_QlolaForgotPassword_FullMethodName                            = "/auth.service.v1.ApiService/QlolaForgotPassword"
	ApiService_RollbackAuthenticationByCompanyIdRPC_FullMethodName           = "/auth.service.v1.ApiService/RollbackAuthenticationByCompanyIdRPC"
	ApiService_DeleteAuthenticationByUsersIDAndCompanyIDRPC_FullMethodName   = "/auth.service.v1.ApiService/DeleteAuthenticationByUsersIDAndCompanyIDRPC"
	ApiService_InsertHistoryChangePassword_FullMethodName                    = "/auth.service.v1.ApiService/InsertHistoryChangePassword"
	ApiService_GetDetailAuthentication_FullMethodName                        = "/auth.service.v1.ApiService/GetDetailAuthentication"
	ApiService_SendEmailNotificationSuccessChangePassword_FullMethodName     = "/auth.service.v1.ApiService/SendEmailNotificationSuccessChangePassword"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetSignatureKey(ctx context.Context, in *GetSigKeyReq, opts ...grpc.CallOption) (*GetSigKeyResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*Empty, error)
	RefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// This api is to get token data, without check signature, or check is token exist at server side or not
	// it accept array of token with max 2 tokens
	GetTokenData(ctx context.Context, in *GetTokenDataRequest, opts ...grpc.CallOption) (*GetTokenDataResponse, error)
	DeleteAccessTokenWhenCompanyOrUserStatusChange(ctx context.Context, in *DeleteAccessTokenRequest, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenRes, error)
	SetMe(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*SetMeRes, error)
	GetMe(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*FilteredVerifyTokenRes, error)
	GetTokenBySession(ctx context.Context, in *VerifySessionReq, opts ...grpc.CallOption) (*LoginResponse, error)
	BricamsVerify(ctx context.Context, in *BricamsVerifyReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	BricamsLogin(ctx context.Context, in *BricamsLoginReq, opts ...grpc.CallOption) (*LoginResponse, error)
	QlolaLogin(ctx context.Context, in *QlolaLoginReq, opts ...grpc.CallOption) (*InitLoginResponse, error)
	QlolaLoginV2(ctx context.Context, in *QlolaLoginReq, opts ...grpc.CallOption) (*InitLoginResponse, error)
	SSOLoginWithInitToken(ctx context.Context, in *InitTokenLoginReqEncrypted, opts ...grpc.CallOption) (*SSOLoginResponse, error)
	QlolaLogout(ctx context.Context, in *QlolaLogoutReq, opts ...grpc.CallOption) (*Empty, error)
	LoginV2(ctx context.Context, in *LoginV2Request, opts ...grpc.CallOption) (*LoginV2Response, error)
	VerifyUserQuestion(ctx context.Context, in *VerifyUserQuestionRequest, opts ...grpc.CallOption) (*VerifyUserQuestionResponse, error)
	VerifyChangePasswordToken(ctx context.Context, in *VerifyChangePasswordTokenRequest, opts ...grpc.CallOption) (*VerifyChangePasswordTokenResponse, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	QlolaTestGenerateSignature(ctx context.Context, in *QlolaLoginReq, opts ...grpc.CallOption) (*QlolaSignatureTestRes, error)
	QlolaTestSignatureBystring(ctx context.Context, in *SignatureReq, opts ...grpc.CallOption) (*QlolaSignatureTestRes, error)
	ResetUserLoginTimeAttemptByUserId(ctx context.Context, in *ResetUserLoginTimeAttemptReq, opts ...grpc.CallOption) (*ResetUserLoginTimeAttemptRes, error)
	RegisterUserIntoAuth(ctx context.Context, in *RegisterUserIntoAuthReq, opts ...grpc.CallOption) (*RegisterUserIntoAuthRes, error)
	RequestAuthData(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*AuthenticationData, error)
	ChangePasswordWithProfile(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	RegisterAddonsUserIntoAuth(ctx context.Context, in *RegisterUserIntoAuthReq, opts ...grpc.CallOption) (*RegisterUserIntoAuthRes, error)
	QLolaUserValidation(ctx context.Context, in *LoginV2Request, opts ...grpc.CallOption) (*QlolaUserValidationBrigateResponse, error)
	QlolaForgotPassword(ctx context.Context, in *QlolaForgotPasswordRequest, opts ...grpc.CallOption) (*QlolaForgotPasswordResponse, error)
	RollbackAuthenticationByCompanyIdRPC(ctx context.Context, in *RollbackAuthenticationByCompanyIdRPCRequest, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error)
	DeleteAuthenticationByUsersIDAndCompanyIDRPC(ctx context.Context, in *DeleteAuthByUsersIdAndCompanyIdReq, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error)
	InsertHistoryChangePassword(ctx context.Context, in *HistoryChangePassword, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	GetDetailAuthentication(ctx context.Context, in *GetDetailAuthenticationRequest, opts ...grpc.CallOption) (*GetDetailAuthenticationResponse, error)
	SendEmailNotificationSuccessChangePassword(ctx context.Context, in *PayloadSendMailSuccessChangePassword, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ApiService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetSignatureKey(ctx context.Context, in *GetSigKeyReq, opts ...grpc.CallOption) (*GetSigKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSigKeyResponse)
	err := c.cc.Invoke(ctx, ApiService_GetSignatureKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ApiService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, ApiService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTokenData(ctx context.Context, in *GetTokenDataRequest, opts ...grpc.CallOption) (*GetTokenDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenDataResponse)
	err := c.cc.Invoke(ctx, ApiService_GetTokenData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteAccessTokenWhenCompanyOrUserStatusChange(ctx context.Context, in *DeleteAccessTokenRequest, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessTokenResponse)
	err := c.cc.Invoke(ctx, ApiService_DeleteAccessTokenWhenCompanyOrUserStatusChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*VerifyTokenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenRes)
	err := c.cc.Invoke(ctx, ApiService_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetMe(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*SetMeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMeRes)
	err := c.cc.Invoke(ctx, ApiService_SetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMe(ctx context.Context, in *VerifyTokenReq, opts ...grpc.CallOption) (*FilteredVerifyTokenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilteredVerifyTokenRes)
	err := c.cc.Invoke(ctx, ApiService_GetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTokenBySession(ctx context.Context, in *VerifySessionReq, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ApiService_GetTokenBySession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BricamsVerify(ctx context.Context, in *BricamsVerifyReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ApiService_BricamsVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BricamsLogin(ctx context.Context, in *BricamsLoginReq, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ApiService_BricamsLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaLogin(ctx context.Context, in *QlolaLoginReq, opts ...grpc.CallOption) (*InitLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitLoginResponse)
	err := c.cc.Invoke(ctx, ApiService_QlolaLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaLoginV2(ctx context.Context, in *QlolaLoginReq, opts ...grpc.CallOption) (*InitLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitLoginResponse)
	err := c.cc.Invoke(ctx, ApiService_QlolaLoginV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SSOLoginWithInitToken(ctx context.Context, in *InitTokenLoginReqEncrypted, opts ...grpc.CallOption) (*SSOLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSOLoginResponse)
	err := c.cc.Invoke(ctx, ApiService_SSOLoginWithInitToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaLogout(ctx context.Context, in *QlolaLogoutReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_QlolaLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) LoginV2(ctx context.Context, in *LoginV2Request, opts ...grpc.CallOption) (*LoginV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginV2Response)
	err := c.cc.Invoke(ctx, ApiService_LoginV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) VerifyUserQuestion(ctx context.Context, in *VerifyUserQuestionRequest, opts ...grpc.CallOption) (*VerifyUserQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyUserQuestionResponse)
	err := c.cc.Invoke(ctx, ApiService_VerifyUserQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) VerifyChangePasswordToken(ctx context.Context, in *VerifyChangePasswordTokenRequest, opts ...grpc.CallOption) (*VerifyChangePasswordTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyChangePasswordTokenResponse)
	err := c.cc.Invoke(ctx, ApiService_VerifyChangePasswordToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ForgotPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForgotPasswordResponse)
	err := c.cc.Invoke(ctx, ApiService_ForgotPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, ApiService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaTestGenerateSignature(ctx context.Context, in *QlolaLoginReq, opts ...grpc.CallOption) (*QlolaSignatureTestRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QlolaSignatureTestRes)
	err := c.cc.Invoke(ctx, ApiService_QlolaTestGenerateSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaTestSignatureBystring(ctx context.Context, in *SignatureReq, opts ...grpc.CallOption) (*QlolaSignatureTestRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QlolaSignatureTestRes)
	err := c.cc.Invoke(ctx, ApiService_QlolaTestSignatureBystring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ResetUserLoginTimeAttemptByUserId(ctx context.Context, in *ResetUserLoginTimeAttemptReq, opts ...grpc.CallOption) (*ResetUserLoginTimeAttemptRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetUserLoginTimeAttemptRes)
	err := c.cc.Invoke(ctx, ApiService_ResetUserLoginTimeAttemptByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RegisterUserIntoAuth(ctx context.Context, in *RegisterUserIntoAuthReq, opts ...grpc.CallOption) (*RegisterUserIntoAuthRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserIntoAuthRes)
	err := c.cc.Invoke(ctx, ApiService_RegisterUserIntoAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RequestAuthData(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*AuthenticationData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticationData)
	err := c.cc.Invoke(ctx, ApiService_RequestAuthData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ChangePasswordWithProfile(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, ApiService_ChangePasswordWithProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RegisterAddonsUserIntoAuth(ctx context.Context, in *RegisterUserIntoAuthReq, opts ...grpc.CallOption) (*RegisterUserIntoAuthRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserIntoAuthRes)
	err := c.cc.Invoke(ctx, ApiService_RegisterAddonsUserIntoAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QLolaUserValidation(ctx context.Context, in *LoginV2Request, opts ...grpc.CallOption) (*QlolaUserValidationBrigateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QlolaUserValidationBrigateResponse)
	err := c.cc.Invoke(ctx, ApiService_QLolaUserValidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) QlolaForgotPassword(ctx context.Context, in *QlolaForgotPasswordRequest, opts ...grpc.CallOption) (*QlolaForgotPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QlolaForgotPasswordResponse)
	err := c.cc.Invoke(ctx, ApiService_QlolaForgotPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RollbackAuthenticationByCompanyIdRPC(ctx context.Context, in *RollbackAuthenticationByCompanyIdRPCRequest, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessTokenResponse)
	err := c.cc.Invoke(ctx, ApiService_RollbackAuthenticationByCompanyIdRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteAuthenticationByUsersIDAndCompanyIDRPC(ctx context.Context, in *DeleteAuthByUsersIdAndCompanyIdReq, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessTokenResponse)
	err := c.cc.Invoke(ctx, ApiService_DeleteAuthenticationByUsersIDAndCompanyIDRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) InsertHistoryChangePassword(ctx context.Context, in *HistoryChangePassword, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, ApiService_InsertHistoryChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDetailAuthentication(ctx context.Context, in *GetDetailAuthenticationRequest, opts ...grpc.CallOption) (*GetDetailAuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailAuthenticationResponse)
	err := c.cc.Invoke(ctx, ApiService_GetDetailAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendEmailNotificationSuccessChangePassword(ctx context.Context, in *PayloadSendMailSuccessChangePassword, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, ApiService_SendEmailNotificationSuccessChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility.
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	GetSignatureKey(context.Context, *GetSigKeyReq) (*GetSigKeyResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*Empty, error)
	RefreshToken(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// This api is to get token data, without check signature, or check is token exist at server side or not
	// it accept array of token with max 2 tokens
	GetTokenData(context.Context, *GetTokenDataRequest) (*GetTokenDataResponse, error)
	DeleteAccessTokenWhenCompanyOrUserStatusChange(context.Context, *DeleteAccessTokenRequest) (*DeleteAccessTokenResponse, error)
	VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenRes, error)
	SetMe(context.Context, *VerifyTokenReq) (*SetMeRes, error)
	GetMe(context.Context, *VerifyTokenReq) (*FilteredVerifyTokenRes, error)
	GetTokenBySession(context.Context, *VerifySessionReq) (*LoginResponse, error)
	BricamsVerify(context.Context, *BricamsVerifyReq) (*httpbody.HttpBody, error)
	BricamsLogin(context.Context, *BricamsLoginReq) (*LoginResponse, error)
	QlolaLogin(context.Context, *QlolaLoginReq) (*InitLoginResponse, error)
	QlolaLoginV2(context.Context, *QlolaLoginReq) (*InitLoginResponse, error)
	SSOLoginWithInitToken(context.Context, *InitTokenLoginReqEncrypted) (*SSOLoginResponse, error)
	QlolaLogout(context.Context, *QlolaLogoutReq) (*Empty, error)
	LoginV2(context.Context, *LoginV2Request) (*LoginV2Response, error)
	VerifyUserQuestion(context.Context, *VerifyUserQuestionRequest) (*VerifyUserQuestionResponse, error)
	VerifyChangePasswordToken(context.Context, *VerifyChangePasswordTokenRequest) (*VerifyChangePasswordTokenResponse, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	QlolaTestGenerateSignature(context.Context, *QlolaLoginReq) (*QlolaSignatureTestRes, error)
	QlolaTestSignatureBystring(context.Context, *SignatureReq) (*QlolaSignatureTestRes, error)
	ResetUserLoginTimeAttemptByUserId(context.Context, *ResetUserLoginTimeAttemptReq) (*ResetUserLoginTimeAttemptRes, error)
	RegisterUserIntoAuth(context.Context, *RegisterUserIntoAuthReq) (*RegisterUserIntoAuthRes, error)
	RequestAuthData(context.Context, *RequestUserId) (*AuthenticationData, error)
	ChangePasswordWithProfile(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	RegisterAddonsUserIntoAuth(context.Context, *RegisterUserIntoAuthReq) (*RegisterUserIntoAuthRes, error)
	QLolaUserValidation(context.Context, *LoginV2Request) (*QlolaUserValidationBrigateResponse, error)
	QlolaForgotPassword(context.Context, *QlolaForgotPasswordRequest) (*QlolaForgotPasswordResponse, error)
	RollbackAuthenticationByCompanyIdRPC(context.Context, *RollbackAuthenticationByCompanyIdRPCRequest) (*DeleteAccessTokenResponse, error)
	DeleteAuthenticationByUsersIDAndCompanyIDRPC(context.Context, *DeleteAuthByUsersIdAndCompanyIdReq) (*DeleteAccessTokenResponse, error)
	InsertHistoryChangePassword(context.Context, *HistoryChangePassword) (*ChangePasswordResponse, error)
	GetDetailAuthentication(context.Context, *GetDetailAuthenticationRequest) (*GetDetailAuthenticationResponse, error)
	SendEmailNotificationSuccessChangePassword(context.Context, *PayloadSendMailSuccessChangePassword) (*ChangePasswordResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServiceServer struct{}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetSignatureKey(context.Context, *GetSigKeyReq) (*GetSigKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignatureKey not implemented")
}
func (UnimplementedApiServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApiServiceServer) Logout(context.Context, *LogoutRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedApiServiceServer) RefreshToken(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedApiServiceServer) GetTokenData(context.Context, *GetTokenDataRequest) (*GetTokenDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenData not implemented")
}
func (UnimplementedApiServiceServer) DeleteAccessTokenWhenCompanyOrUserStatusChange(context.Context, *DeleteAccessTokenRequest) (*DeleteAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessTokenWhenCompanyOrUserStatusChange not implemented")
}
func (UnimplementedApiServiceServer) VerifyToken(context.Context, *VerifyTokenReq) (*VerifyTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedApiServiceServer) SetMe(context.Context, *VerifyTokenReq) (*SetMeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMe not implemented")
}
func (UnimplementedApiServiceServer) GetMe(context.Context, *VerifyTokenReq) (*FilteredVerifyTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedApiServiceServer) GetTokenBySession(context.Context, *VerifySessionReq) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBySession not implemented")
}
func (UnimplementedApiServiceServer) BricamsVerify(context.Context, *BricamsVerifyReq) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BricamsVerify not implemented")
}
func (UnimplementedApiServiceServer) BricamsLogin(context.Context, *BricamsLoginReq) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BricamsLogin not implemented")
}
func (UnimplementedApiServiceServer) QlolaLogin(context.Context, *QlolaLoginReq) (*InitLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaLogin not implemented")
}
func (UnimplementedApiServiceServer) QlolaLoginV2(context.Context, *QlolaLoginReq) (*InitLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaLoginV2 not implemented")
}
func (UnimplementedApiServiceServer) SSOLoginWithInitToken(context.Context, *InitTokenLoginReqEncrypted) (*SSOLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSOLoginWithInitToken not implemented")
}
func (UnimplementedApiServiceServer) QlolaLogout(context.Context, *QlolaLogoutReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaLogout not implemented")
}
func (UnimplementedApiServiceServer) LoginV2(context.Context, *LoginV2Request) (*LoginV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginV2 not implemented")
}
func (UnimplementedApiServiceServer) VerifyUserQuestion(context.Context, *VerifyUserQuestionRequest) (*VerifyUserQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserQuestion not implemented")
}
func (UnimplementedApiServiceServer) VerifyChangePasswordToken(context.Context, *VerifyChangePasswordTokenRequest) (*VerifyChangePasswordTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChangePasswordToken not implemented")
}
func (UnimplementedApiServiceServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*ForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedApiServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedApiServiceServer) QlolaTestGenerateSignature(context.Context, *QlolaLoginReq) (*QlolaSignatureTestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaTestGenerateSignature not implemented")
}
func (UnimplementedApiServiceServer) QlolaTestSignatureBystring(context.Context, *SignatureReq) (*QlolaSignatureTestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaTestSignatureBystring not implemented")
}
func (UnimplementedApiServiceServer) ResetUserLoginTimeAttemptByUserId(context.Context, *ResetUserLoginTimeAttemptReq) (*ResetUserLoginTimeAttemptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserLoginTimeAttemptByUserId not implemented")
}
func (UnimplementedApiServiceServer) RegisterUserIntoAuth(context.Context, *RegisterUserIntoAuthReq) (*RegisterUserIntoAuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserIntoAuth not implemented")
}
func (UnimplementedApiServiceServer) RequestAuthData(context.Context, *RequestUserId) (*AuthenticationData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAuthData not implemented")
}
func (UnimplementedApiServiceServer) ChangePasswordWithProfile(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordWithProfile not implemented")
}
func (UnimplementedApiServiceServer) RegisterAddonsUserIntoAuth(context.Context, *RegisterUserIntoAuthReq) (*RegisterUserIntoAuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAddonsUserIntoAuth not implemented")
}
func (UnimplementedApiServiceServer) QLolaUserValidation(context.Context, *LoginV2Request) (*QlolaUserValidationBrigateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QLolaUserValidation not implemented")
}
func (UnimplementedApiServiceServer) QlolaForgotPassword(context.Context, *QlolaForgotPasswordRequest) (*QlolaForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QlolaForgotPassword not implemented")
}
func (UnimplementedApiServiceServer) RollbackAuthenticationByCompanyIdRPC(context.Context, *RollbackAuthenticationByCompanyIdRPCRequest) (*DeleteAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackAuthenticationByCompanyIdRPC not implemented")
}
func (UnimplementedApiServiceServer) DeleteAuthenticationByUsersIDAndCompanyIDRPC(context.Context, *DeleteAuthByUsersIdAndCompanyIdReq) (*DeleteAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthenticationByUsersIDAndCompanyIDRPC not implemented")
}
func (UnimplementedApiServiceServer) InsertHistoryChangePassword(context.Context, *HistoryChangePassword) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertHistoryChangePassword not implemented")
}
func (UnimplementedApiServiceServer) GetDetailAuthentication(context.Context, *GetDetailAuthenticationRequest) (*GetDetailAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailAuthentication not implemented")
}
func (UnimplementedApiServiceServer) SendEmailNotificationSuccessChangePassword(context.Context, *PayloadSendMailSuccessChangePassword) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailNotificationSuccessChangePassword not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}
func (UnimplementedApiServiceServer) testEmbeddedByValue()                    {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetSignatureKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetSignatureKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetSignatureKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetSignatureKey(ctx, req.(*GetSigKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RefreshToken(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTokenData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTokenData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTokenData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTokenData(ctx, req.(*GetTokenDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteAccessTokenWhenCompanyOrUserStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteAccessTokenWhenCompanyOrUserStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteAccessTokenWhenCompanyOrUserStatusChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteAccessTokenWhenCompanyOrUserStatusChange(ctx, req.(*DeleteAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).VerifyToken(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetMe(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMe(ctx, req.(*VerifyTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTokenBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTokenBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTokenBySession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTokenBySession(ctx, req.(*VerifySessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BricamsVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BricamsVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_BricamsVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BricamsVerify(ctx, req.(*BricamsVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BricamsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BricamsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_BricamsLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BricamsLogin(ctx, req.(*BricamsLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QlolaLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaLogin(ctx, req.(*QlolaLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaLoginV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QlolaLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaLoginV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaLoginV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaLoginV2(ctx, req.(*QlolaLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SSOLoginWithInitToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitTokenLoginReqEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SSOLoginWithInitToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SSOLoginWithInitToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SSOLoginWithInitToken(ctx, req.(*InitTokenLoginReqEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QlolaLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaLogout(ctx, req.(*QlolaLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_LoginV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).LoginV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_LoginV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).LoginV2(ctx, req.(*LoginV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_VerifyUserQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).VerifyUserQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_VerifyUserQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).VerifyUserQuestion(ctx, req.(*VerifyUserQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_VerifyChangePasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChangePasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).VerifyChangePasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_VerifyChangePasswordToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).VerifyChangePasswordToken(ctx, req.(*VerifyChangePasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ForgotPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaTestGenerateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QlolaLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaTestGenerateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaTestGenerateSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaTestGenerateSignature(ctx, req.(*QlolaLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaTestSignatureBystring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaTestSignatureBystring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaTestSignatureBystring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaTestSignatureBystring(ctx, req.(*SignatureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ResetUserLoginTimeAttemptByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserLoginTimeAttemptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ResetUserLoginTimeAttemptByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ResetUserLoginTimeAttemptByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ResetUserLoginTimeAttemptByUserId(ctx, req.(*ResetUserLoginTimeAttemptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RegisterUserIntoAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserIntoAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RegisterUserIntoAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RegisterUserIntoAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RegisterUserIntoAuth(ctx, req.(*RegisterUserIntoAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RequestAuthData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RequestAuthData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RequestAuthData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RequestAuthData(ctx, req.(*RequestUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ChangePasswordWithProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ChangePasswordWithProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ChangePasswordWithProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ChangePasswordWithProfile(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RegisterAddonsUserIntoAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserIntoAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RegisterAddonsUserIntoAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RegisterAddonsUserIntoAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RegisterAddonsUserIntoAuth(ctx, req.(*RegisterUserIntoAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QLolaUserValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QLolaUserValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QLolaUserValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QLolaUserValidation(ctx, req.(*LoginV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_QlolaForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QlolaForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).QlolaForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_QlolaForgotPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).QlolaForgotPassword(ctx, req.(*QlolaForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RollbackAuthenticationByCompanyIdRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackAuthenticationByCompanyIdRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RollbackAuthenticationByCompanyIdRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RollbackAuthenticationByCompanyIdRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RollbackAuthenticationByCompanyIdRPC(ctx, req.(*RollbackAuthenticationByCompanyIdRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteAuthenticationByUsersIDAndCompanyIDRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthByUsersIdAndCompanyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteAuthenticationByUsersIDAndCompanyIDRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteAuthenticationByUsersIDAndCompanyIDRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteAuthenticationByUsersIDAndCompanyIDRPC(ctx, req.(*DeleteAuthByUsersIdAndCompanyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_InsertHistoryChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).InsertHistoryChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_InsertHistoryChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).InsertHistoryChangePassword(ctx, req.(*HistoryChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDetailAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDetailAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDetailAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDetailAuthentication(ctx, req.(*GetDetailAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendEmailNotificationSuccessChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayloadSendMailSuccessChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendEmailNotificationSuccessChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SendEmailNotificationSuccessChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendEmailNotificationSuccessChangePassword(ctx, req.(*PayloadSendMailSuccessChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetSignatureKey",
			Handler:    _ApiService_GetSignatureKey_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ApiService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ApiService_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ApiService_RefreshToken_Handler,
		},
		{
			MethodName: "GetTokenData",
			Handler:    _ApiService_GetTokenData_Handler,
		},
		{
			MethodName: "DeleteAccessTokenWhenCompanyOrUserStatusChange",
			Handler:    _ApiService_DeleteAccessTokenWhenCompanyOrUserStatusChange_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _ApiService_VerifyToken_Handler,
		},
		{
			MethodName: "SetMe",
			Handler:    _ApiService_SetMe_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _ApiService_GetMe_Handler,
		},
		{
			MethodName: "GetTokenBySession",
			Handler:    _ApiService_GetTokenBySession_Handler,
		},
		{
			MethodName: "BricamsVerify",
			Handler:    _ApiService_BricamsVerify_Handler,
		},
		{
			MethodName: "BricamsLogin",
			Handler:    _ApiService_BricamsLogin_Handler,
		},
		{
			MethodName: "QlolaLogin",
			Handler:    _ApiService_QlolaLogin_Handler,
		},
		{
			MethodName: "QlolaLoginV2",
			Handler:    _ApiService_QlolaLoginV2_Handler,
		},
		{
			MethodName: "SSOLoginWithInitToken",
			Handler:    _ApiService_SSOLoginWithInitToken_Handler,
		},
		{
			MethodName: "QlolaLogout",
			Handler:    _ApiService_QlolaLogout_Handler,
		},
		{
			MethodName: "LoginV2",
			Handler:    _ApiService_LoginV2_Handler,
		},
		{
			MethodName: "VerifyUserQuestion",
			Handler:    _ApiService_VerifyUserQuestion_Handler,
		},
		{
			MethodName: "VerifyChangePasswordToken",
			Handler:    _ApiService_VerifyChangePasswordToken_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _ApiService_ForgotPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _ApiService_ChangePassword_Handler,
		},
		{
			MethodName: "QlolaTestGenerateSignature",
			Handler:    _ApiService_QlolaTestGenerateSignature_Handler,
		},
		{
			MethodName: "QlolaTestSignatureBystring",
			Handler:    _ApiService_QlolaTestSignatureBystring_Handler,
		},
		{
			MethodName: "ResetUserLoginTimeAttemptByUserId",
			Handler:    _ApiService_ResetUserLoginTimeAttemptByUserId_Handler,
		},
		{
			MethodName: "RegisterUserIntoAuth",
			Handler:    _ApiService_RegisterUserIntoAuth_Handler,
		},
		{
			MethodName: "RequestAuthData",
			Handler:    _ApiService_RequestAuthData_Handler,
		},
		{
			MethodName: "ChangePasswordWithProfile",
			Handler:    _ApiService_ChangePasswordWithProfile_Handler,
		},
		{
			MethodName: "RegisterAddonsUserIntoAuth",
			Handler:    _ApiService_RegisterAddonsUserIntoAuth_Handler,
		},
		{
			MethodName: "QLolaUserValidation",
			Handler:    _ApiService_QLolaUserValidation_Handler,
		},
		{
			MethodName: "QlolaForgotPassword",
			Handler:    _ApiService_QlolaForgotPassword_Handler,
		},
		{
			MethodName: "RollbackAuthenticationByCompanyIdRPC",
			Handler:    _ApiService_RollbackAuthenticationByCompanyIdRPC_Handler,
		},
		{
			MethodName: "DeleteAuthenticationByUsersIDAndCompanyIDRPC",
			Handler:    _ApiService_DeleteAuthenticationByUsersIDAndCompanyIDRPC_Handler,
		},
		{
			MethodName: "InsertHistoryChangePassword",
			Handler:    _ApiService_InsertHistoryChangePassword_Handler,
		},
		{
			MethodName: "GetDetailAuthentication",
			Handler:    _ApiService_GetDetailAuthentication_Handler,
		},
		{
			MethodName: "SendEmailNotificationSuccessChangePassword",
			Handler:    _ApiService_SendEmailNotificationSuccessChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth-service/auth_api.proto",
}
