// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v3.20.3
// source: auth-service/auth_api.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TempGenToken_Role int32

const (
	TempGenToken_bankadmin         TempGenToken_Role = 0
	TempGenToken_notificationadmin TempGenToken_Role = 1
	TempGenToken_notificationuser  TempGenToken_Role = 2
)

// Enum value maps for TempGenToken_Role.
var (
	TempGenToken_Role_name = map[int32]string{
		0: "bankadmin",
		1: "notificationadmin",
		2: "notificationuser",
	}
	TempGenToken_Role_value = map[string]int32{
		"bankadmin":         0,
		"notificationadmin": 1,
		"notificationuser":  2,
	}
)

func (x TempGenToken_Role) Enum() *TempGenToken_Role {
	p := new(TempGenToken_Role)
	*p = x
	return p
}

func (x TempGenToken_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempGenToken_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_service_auth_api_proto_enumTypes[0].Descriptor()
}

func (TempGenToken_Role) Type() protoreflect.EnumType {
	return &file_auth_service_auth_api_proto_enumTypes[0]
}

func (x TempGenToken_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempGenToken_Role.Descriptor instead.
func (TempGenToken_Role) EnumDescriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{10, 0}
}

type ResetUserLoginTimeAttemptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *ResetUserLoginTimeAttemptReq) Reset() {
	*x = ResetUserLoginTimeAttemptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserLoginTimeAttemptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserLoginTimeAttemptReq) ProtoMessage() {}

func (x *ResetUserLoginTimeAttemptReq) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserLoginTimeAttemptReq.ProtoReflect.Descriptor instead.
func (*ResetUserLoginTimeAttemptReq) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{0}
}

func (x *ResetUserLoginTimeAttemptReq) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type ResetUserLoginTimeAttemptRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code      uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	IsSuccess bool   `protobuf:"varint,4,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
}

func (x *ResetUserLoginTimeAttemptRes) Reset() {
	*x = ResetUserLoginTimeAttemptRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserLoginTimeAttemptRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserLoginTimeAttemptRes) ProtoMessage() {}

func (x *ResetUserLoginTimeAttemptRes) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserLoginTimeAttemptRes.ProtoReflect.Descriptor instead.
func (*ResetUserLoginTimeAttemptRes) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{1}
}

func (x *ResetUserLoginTimeAttemptRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ResetUserLoginTimeAttemptRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResetUserLoginTimeAttemptRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResetUserLoginTimeAttemptRes) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type BricamsVerifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	USERID    string `protobuf:"bytes,1,opt,name=USERID,proto3" json:"USERID,omitempty"`
	SESSIONID string `protobuf:"bytes,2,opt,name=SESSIONID,proto3" json:"SESSIONID,omitempty"`
}

func (x *BricamsVerifyReq) Reset() {
	*x = BricamsVerifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsVerifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsVerifyReq) ProtoMessage() {}

func (x *BricamsVerifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsVerifyReq.ProtoReflect.Descriptor instead.
func (*BricamsVerifyReq) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{2}
}

func (x *BricamsVerifyReq) GetUSERID() string {
	if x != nil {
		return x.USERID
	}
	return ""
}

func (x *BricamsVerifyReq) GetSESSIONID() string {
	if x != nil {
		return x.SESSIONID
	}
	return ""
}

type BricamsLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	USERID    string `protobuf:"bytes,1,opt,name=USERID,proto3" json:"USERID,omitempty"`
	SESSIONID string `protobuf:"bytes,2,opt,name=SESSIONID,proto3" json:"SESSIONID,omitempty"`
	DTTIME    string `protobuf:"bytes,3,opt,name=DTTIME,proto3" json:"DTTIME,omitempty"`
	TokenFCM  string `protobuf:"bytes,4,opt,name=tokenFCM,proto3" json:"tokenFCM,omitempty"`
}

func (x *BricamsLoginReq) Reset() {
	*x = BricamsLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsLoginReq) ProtoMessage() {}

func (x *BricamsLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsLoginReq.ProtoReflect.Descriptor instead.
func (*BricamsLoginReq) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{3}
}

func (x *BricamsLoginReq) GetUSERID() string {
	if x != nil {
		return x.USERID
	}
	return ""
}

func (x *BricamsLoginReq) GetSESSIONID() string {
	if x != nil {
		return x.SESSIONID
	}
	return ""
}

func (x *BricamsLoginReq) GetDTTIME() string {
	if x != nil {
		return x.DTTIME
	}
	return ""
}

func (x *BricamsLoginReq) GetTokenFCM() string {
	if x != nil {
		return x.TokenFCM
	}
	return ""
}

type QlolaLoginSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	REQUEST string `protobuf:"bytes,1,opt,name=REQUEST,proto3" json:"REQUEST,omitempty"`
}

func (x *QlolaLoginSignature) Reset() {
	*x = QlolaLoginSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QlolaLoginSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QlolaLoginSignature) ProtoMessage() {}

func (x *QlolaLoginSignature) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QlolaLoginSignature.ProtoReflect.Descriptor instead.
func (*QlolaLoginSignature) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{4}
}

func (x *QlolaLoginSignature) GetREQUEST() string {
	if x != nil {
		return x.REQUEST
	}
	return ""
}

type QlolaLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	COMPANYID string `protobuf:"bytes,1,opt,name=COMPANYID,proto3" json:"COMPANYID,omitempty"`
	USERID    string `protobuf:"bytes,2,opt,name=USERID,proto3" json:"USERID,omitempty"`
	SESSIONID string `protobuf:"bytes,3,opt,name=SESSIONID,proto3" json:"SESSIONID,omitempty"`
	URL       string `protobuf:"bytes,4,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *QlolaLoginReq) Reset() {
	*x = QlolaLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QlolaLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QlolaLoginReq) ProtoMessage() {}

func (x *QlolaLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QlolaLoginReq.ProtoReflect.Descriptor instead.
func (*QlolaLoginReq) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{5}
}

func (x *QlolaLoginReq) GetCOMPANYID() string {
	if x != nil {
		return x.COMPANYID
	}
	return ""
}

func (x *QlolaLoginReq) GetUSERID() string {
	if x != nil {
		return x.USERID
	}
	return ""
}

func (x *QlolaLoginReq) GetSESSIONID() string {
	if x != nil {
		return x.SESSIONID
	}
	return ""
}

func (x *QlolaLoginReq) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type QlolaLogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	COMPANYID string `protobuf:"bytes,1,opt,name=COMPANYID,proto3" json:"COMPANYID,omitempty"`
	USERID    string `protobuf:"bytes,2,opt,name=USERID,proto3" json:"USERID,omitempty"`
	SESSIONID string `protobuf:"bytes,3,opt,name=SESSIONID,proto3" json:"SESSIONID,omitempty"`
}

func (x *QlolaLogoutReq) Reset() {
	*x = QlolaLogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QlolaLogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QlolaLogoutReq) ProtoMessage() {}

func (x *QlolaLogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QlolaLogoutReq.ProtoReflect.Descriptor instead.
func (*QlolaLogoutReq) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{6}
}

func (x *QlolaLogoutReq) GetCOMPANYID() string {
	if x != nil {
		return x.COMPANYID
	}
	return ""
}

func (x *QlolaLogoutReq) GetUSERID() string {
	if x != nil {
		return x.USERID
	}
	return ""
}

func (x *QlolaLogoutReq) GetSESSIONID() string {
	if x != nil {
		return x.SESSIONID
	}
	return ""
}

type SignatureReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessionid  string `protobuf:"bytes,1,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	Jsonstring string `protobuf:"bytes,2,opt,name=jsonstring,proto3" json:"jsonstring,omitempty"`
}

func (x *SignatureReq) Reset() {
	*x = SignatureReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureReq) ProtoMessage() {}

func (x *SignatureReq) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureReq.ProtoReflect.Descriptor instead.
func (*SignatureReq) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{7}
}

func (x *SignatureReq) GetSessionid() string {
	if x != nil {
		return x.Sessionid
	}
	return ""
}

func (x *SignatureReq) GetJsonstring() string {
	if x != nil {
		return x.Jsonstring
	}
	return ""
}

type QlolaSignatureTestRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Jsonbody  string `protobuf:"bytes,2,opt,name=jsonbody,proto3" json:"jsonbody,omitempty"`
}

func (x *QlolaSignatureTestRes) Reset() {
	*x = QlolaSignatureTestRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QlolaSignatureTestRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QlolaSignatureTestRes) ProtoMessage() {}

func (x *QlolaSignatureTestRes) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QlolaSignatureTestRes.ProtoReflect.Descriptor instead.
func (*QlolaSignatureTestRes) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{8}
}

func (x *QlolaSignatureTestRes) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *QlolaSignatureTestRes) GetJsonbody() string {
	if x != nil {
		return x.Jsonbody
	}
	return ""
}

type BricamsVerifyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BricamsVerifyRes) Reset() {
	*x = BricamsVerifyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsVerifyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsVerifyRes) ProtoMessage() {}

func (x *BricamsVerifyRes) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsVerifyRes.ProtoReflect.Descriptor instead.
func (*BricamsVerifyRes) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{9}
}

type TempGenToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role TempGenToken_Role `protobuf:"varint,1,opt,name=role,proto3,enum=auth.service.v1.TempGenToken_Role" json:"role,omitempty"`
}

func (x *TempGenToken) Reset() {
	*x = TempGenToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_service_auth_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempGenToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempGenToken) ProtoMessage() {}

func (x *TempGenToken) ProtoReflect() protoreflect.Message {
	mi := &file_auth_service_auth_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempGenToken.ProtoReflect.Descriptor instead.
func (*TempGenToken) Descriptor() ([]byte, []int) {
	return file_auth_service_auth_api_proto_rawDescGZIP(), []int{10}
}

func (x *TempGenToken) GetRole() TempGenToken_Role {
	if x != nil {
		return x.Role
	}
	return TempGenToken_bankadmin
}

var File_auth_service_auth_api_proto protoreflect.FileDescriptor

var file_auth_service_auth_api_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x80, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x10, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x22, 0x7b, 0x0a,
	0x0f, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x54, 0x54, 0x49, 0x4d, 0x45,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x43, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x43, 0x4d, 0x22, 0x2f, 0x0a, 0x13, 0x51, 0x6c,
	0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x22, 0x75, 0x0a, 0x0d, 0x51,
	0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x53,
	0x45, 0x52, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x53, 0x45, 0x52,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x52, 0x4c, 0x22, 0x64, 0x0a, 0x0e, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x51, 0x0a, 0x15, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x72, 0x69,
	0x63, 0x61, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x22, 0x8a, 0x01,
	0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x72, 0x10, 0x02, 0x32, 0xa9, 0x33, 0x0a, 0x0a, 0x41,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x92, 0x41, 0x32, 0x12, 0x0c, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x20, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0xd3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x92,
	0x41, 0x5b, 0x12, 0x1d, 0x47, 0x65, 0x74, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x1a, 0x38, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x62, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x12, 0xa3, 0x01, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x92, 0x41, 0x35, 0x12, 0x0a, 0x41, 0x75, 0x74, 0x68,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x50, 0x92, 0x41, 0x35, 0x12, 0x0b, 0x41, 0x75, 0x74, 0x68,
	0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x1a, 0x26, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x37,
	0x12, 0x12, 0x41, 0x75, 0x74, 0x68, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a,
	0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5d, 0x92, 0x41, 0x3b, 0x12, 0x15, 0x41, 0x75, 0x74, 0x68, 0x20, 0x69, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x20, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x62,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x12, 0xaf, 0x02, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x92, 0x41, 0x83,
	0x01, 0x12, 0x34, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x4b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x6f,
	0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x12, 0x1f, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x50, 0x92, 0x41,
	0x39, 0x12, 0x10, 0x47, 0x65, 0x74, 0x20, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x65, 0x12, 0xb4,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x92, 0x41, 0x3d, 0x12, 0x12, 0x47, 0x65,
	0x74, 0x20, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x65, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x67, 0x92, 0x41, 0x35, 0x12, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x3a, 0x01, 0x2a, 0x5a, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x42, 0x72,
	0x69, 0x63, 0x61, 0x6d, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69,
	0x63, 0x61, 0x6d, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x92, 0x41,
	0x35, 0x12, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x25, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xd9, 0x01,
	0x0a, 0x0a, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x86, 0x01, 0x92, 0x41, 0x63, 0x12, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x31, 0x31, 0x1a, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x62, 0x00, 0x72, 0x1e, 0x0a, 0x1c, 0x0a, 0x0b, 0x58,
	0x2d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x28, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a,
	0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2f, 0x71, 0x6c, 0x6f, 0x6c, 0x61, 0x12, 0xde, 0x01, 0x0a, 0x0c, 0x51, 0x6c,
	0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x32, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6c, 0x6f,
	0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89,
	0x01, 0x92, 0x41, 0x63, 0x12, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x31, 0x31, 0x1a, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x62, 0x00, 0x72, 0x1e, 0x0a, 0x1c, 0x0a, 0x0b, 0x58, 0x2d, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x28, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a,
	0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x71, 0x6c, 0x6f, 0x6c, 0x61, 0x12, 0xd4, 0x01, 0x0a, 0x15, 0x53,
	0x53, 0x4f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x53, 0x4f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x92, 0x41, 0x43, 0x12, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x31, 0x31, 0x1a, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0xd0, 0x01, 0x0a, 0x0b, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x87, 0x01, 0x92, 0x41, 0x63,
	0x12, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x31, 0x31, 0x1a,
	0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x51, 0x6c, 0x6f, 0x6c,
	0x61, 0x62, 0x00, 0x72, 0x1e, 0x0a, 0x1c, 0x0a, 0x0b, 0x58, 0x2d, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x28, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x2f, 0x71,
	0x6c, 0x6f, 0x6c, 0x61, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x32,
	0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x75, 0x92, 0x41, 0x55, 0x12, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x72, 0x1e, 0x0a,
	0x1c, 0x0a, 0x0b, 0x58, 0x2d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x28, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xeb, 0x01, 0x0a, 0x12, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x55, 0x12,
	0x2c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x20,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x23, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x02, 0x0a, 0x19, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01,
	0x92, 0x41, 0x56, 0x12, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a,
	0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xd3, 0x01, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70,
	0x92, 0x41, 0x49, 0x12, 0x14, 0x41, 0x75, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x2f, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0xd3, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x92, 0x41, 0x49, 0x12, 0x14, 0x41, 0x75, 0x74, 0x68, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x2f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xd3, 0x01, 0x0a, 0x1a, 0x51, 0x6c, 0x6f, 0x6c, 0x61,
	0x54, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x6d, 0x92,
	0x41, 0x4a, 0x12, 0x14, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x71, 0x6c, 0x6f, 0x6c, 0x61, 0x2f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x12, 0xd9, 0x01, 0x0a,
	0x1a, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x79, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x6c, 0x6f,
	0x6c, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x74, 0x92, 0x41, 0x4a, 0x12, 0x14, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x20, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x54, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x62,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x71, 0x6c, 0x6f,
	0x6c, 0x61, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x14,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x23, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x57, 0x92, 0x41, 0x35, 0x12, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0xe4, 0x01, 0x0a, 0x19, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x92, 0x41, 0x47, 0x12, 0x14,
	0x41, 0x75, 0x74, 0x68, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x2f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x70, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x13, 0x51, 0x4c, 0x6f, 0x6c, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x6c, 0x6f, 0x6c, 0x61, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x75, 0x92, 0x41, 0x4d, 0x12, 0x14, 0x41, 0x75, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x35, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x71, 0x6c, 0x6f,
	0x6c, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x71, 0x6c, 0x6f, 0x6c, 0x61, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xef, 0x01, 0x0a, 0x13, 0x51, 0x6c, 0x6f,
	0x6c, 0x61, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x6c, 0x6f, 0x6c, 0x61, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x92, 0x41, 0x50,
	0x0a, 0x05, 0x51, 0x4c, 0x4f, 0x4c, 0x41, 0x12, 0x14, 0x41, 0x75, 0x74, 0x68, 0x20, 0x66, 0x6f,
	0x72, 0x67, 0x6f, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x2f, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x67,
	0x6f, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x71, 0x6c, 0x6f, 0x6c, 0x61, 0x2f, 0x66, 0x6f, 0x72, 0x67, 0x6f,
	0x74, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x24, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x52, 0x50, 0x43, 0x12, 0x3c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x52, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x44, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x52, 0x50, 0x43,
	0x12, 0x33, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x27, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x2a, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x27, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x72, 0x92, 0x41, 0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x12, 0x00, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_auth_service_auth_api_proto_rawDescOnce sync.Once
	file_auth_service_auth_api_proto_rawDescData = file_auth_service_auth_api_proto_rawDesc
)

func file_auth_service_auth_api_proto_rawDescGZIP() []byte {
	file_auth_service_auth_api_proto_rawDescOnce.Do(func() {
		file_auth_service_auth_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_service_auth_api_proto_rawDescData)
	})
	return file_auth_service_auth_api_proto_rawDescData
}

var file_auth_service_auth_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_auth_service_auth_api_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_auth_service_auth_api_proto_goTypes = []interface{}{
	(TempGenToken_Role)(0),                              // 0: auth.service.v1.TempGenToken.Role
	(*ResetUserLoginTimeAttemptReq)(nil),                // 1: auth.service.v1.ResetUserLoginTimeAttemptReq
	(*ResetUserLoginTimeAttemptRes)(nil),                // 2: auth.service.v1.ResetUserLoginTimeAttemptRes
	(*BricamsVerifyReq)(nil),                            // 3: auth.service.v1.BricamsVerifyReq
	(*BricamsLoginReq)(nil),                             // 4: auth.service.v1.BricamsLoginReq
	(*QlolaLoginSignature)(nil),                         // 5: auth.service.v1.QlolaLoginSignature
	(*QlolaLoginReq)(nil),                               // 6: auth.service.v1.QlolaLoginReq
	(*QlolaLogoutReq)(nil),                              // 7: auth.service.v1.QlolaLogoutReq
	(*SignatureReq)(nil),                                // 8: auth.service.v1.SignatureReq
	(*QlolaSignatureTestRes)(nil),                       // 9: auth.service.v1.QlolaSignatureTestRes
	(*BricamsVerifyRes)(nil),                            // 10: auth.service.v1.BricamsVerifyRes
	(*TempGenToken)(nil),                                // 11: auth.service.v1.TempGenToken
	(*Empty)(nil),                                       // 12: auth.service.v1.Empty
	(*GetSigKeyReq)(nil),                                // 13: auth.service.v1.GetSigKeyReq
	(*LoginRequest)(nil),                                // 14: auth.service.v1.LoginRequest
	(*LogoutRequest)(nil),                               // 15: auth.service.v1.LogoutRequest
	(*RefreshRequest)(nil),                              // 16: auth.service.v1.RefreshRequest
	(*GetTokenDataRequest)(nil),                         // 17: auth.service.v1.GetTokenDataRequest
	(*DeleteAccessTokenRequest)(nil),                    // 18: auth.service.v1.DeleteAccessTokenRequest
	(*VerifyTokenReq)(nil),                              // 19: auth.service.v1.VerifyTokenReq
	(*VerifySessionReq)(nil),                            // 20: auth.service.v1.VerifySessionReq
	(*InitTokenLoginReqEncrypted)(nil),                  // 21: auth.service.v1.InitTokenLoginReqEncrypted
	(*LoginV2Request)(nil),                              // 22: auth.service.v1.LoginV2Request
	(*VerifyUserQuestionRequest)(nil),                   // 23: auth.service.v1.VerifyUserQuestionRequest
	(*VerifyChangePasswordTokenRequest)(nil),            // 24: auth.service.v1.VerifyChangePasswordTokenRequest
	(*ForgotPasswordRequest)(nil),                       // 25: auth.service.v1.ForgotPasswordRequest
	(*ChangePasswordRequest)(nil),                       // 26: auth.service.v1.ChangePasswordRequest
	(*RegisterUserIntoAuthReq)(nil),                     // 27: auth.service.v1.RegisterUserIntoAuthReq
	(*RequestUserId)(nil),                               // 28: auth.service.v1.RequestUserId
	(*QlolaForgotPasswordRequest)(nil),                  // 29: auth.service.v1.QlolaForgotPasswordRequest
	(*RollbackAuthenticationByCompanyIdRPCRequest)(nil), // 30: auth.service.v1.RollbackAuthenticationByCompanyIdRPCRequest
	(*DeleteAuthByUsersIdAndCompanyIdReq)(nil),          // 31: auth.service.v1.DeleteAuthByUsersIdAndCompanyIdReq
	(*HistoryChangePassword)(nil),                       // 32: auth.service.v1.HistoryChangePassword
	(*GetDetailAuthenticationRequest)(nil),              // 33: auth.service.v1.GetDetailAuthenticationRequest
	(*PayloadSendMailSuccessChangePassword)(nil),        // 34: auth.service.v1.PayloadSendMailSuccessChangePassword
	(*HealthCheckResponse)(nil),                         // 35: auth.service.v1.HealthCheckResponse
	(*GetSigKeyResponse)(nil),                           // 36: auth.service.v1.GetSigKeyResponse
	(*LoginResponse)(nil),                               // 37: auth.service.v1.LoginResponse
	(*RefreshResponse)(nil),                             // 38: auth.service.v1.RefreshResponse
	(*GetTokenDataResponse)(nil),                        // 39: auth.service.v1.GetTokenDataResponse
	(*DeleteAccessTokenResponse)(nil),                   // 40: auth.service.v1.DeleteAccessTokenResponse
	(*VerifyTokenRes)(nil),                              // 41: auth.service.v1.VerifyTokenRes
	(*SetMeRes)(nil),                                    // 42: auth.service.v1.SetMeRes
	(*FilteredVerifyTokenRes)(nil),                      // 43: auth.service.v1.FilteredVerifyTokenRes
	(*httpbody.HttpBody)(nil),                           // 44: google.api.HttpBody
	(*InitLoginResponse)(nil),                           // 45: auth.service.v1.InitLoginResponse
	(*SSOLoginResponse)(nil),                            // 46: auth.service.v1.SSOLoginResponse
	(*LoginV2Response)(nil),                             // 47: auth.service.v1.LoginV2Response
	(*VerifyUserQuestionResponse)(nil),                  // 48: auth.service.v1.VerifyUserQuestionResponse
	(*VerifyChangePasswordTokenResponse)(nil),           // 49: auth.service.v1.VerifyChangePasswordTokenResponse
	(*ForgotPasswordResponse)(nil),                      // 50: auth.service.v1.ForgotPasswordResponse
	(*ChangePasswordResponse)(nil),                      // 51: auth.service.v1.ChangePasswordResponse
	(*RegisterUserIntoAuthRes)(nil),                     // 52: auth.service.v1.RegisterUserIntoAuthRes
	(*AuthenticationData)(nil),                          // 53: auth.service.v1.AuthenticationData
	(*QlolaUserValidationBrigateResponse)(nil),          // 54: auth.service.v1.QlolaUserValidationBrigateResponse
	(*QlolaForgotPasswordResponse)(nil),                 // 55: auth.service.v1.QlolaForgotPasswordResponse
	(*GetDetailAuthenticationResponse)(nil),             // 56: auth.service.v1.GetDetailAuthenticationResponse
}
var file_auth_service_auth_api_proto_depIdxs = []int32{
	0,  // 0: auth.service.v1.TempGenToken.role:type_name -> auth.service.v1.TempGenToken.Role
	12, // 1: auth.service.v1.ApiService.HealthCheck:input_type -> auth.service.v1.Empty
	13, // 2: auth.service.v1.ApiService.GetSignatureKey:input_type -> auth.service.v1.GetSigKeyReq
	14, // 3: auth.service.v1.ApiService.Login:input_type -> auth.service.v1.LoginRequest
	15, // 4: auth.service.v1.ApiService.Logout:input_type -> auth.service.v1.LogoutRequest
	16, // 5: auth.service.v1.ApiService.RefreshToken:input_type -> auth.service.v1.RefreshRequest
	17, // 6: auth.service.v1.ApiService.GetTokenData:input_type -> auth.service.v1.GetTokenDataRequest
	18, // 7: auth.service.v1.ApiService.DeleteAccessTokenWhenCompanyOrUserStatusChange:input_type -> auth.service.v1.DeleteAccessTokenRequest
	19, // 8: auth.service.v1.ApiService.VerifyToken:input_type -> auth.service.v1.VerifyTokenReq
	19, // 9: auth.service.v1.ApiService.SetMe:input_type -> auth.service.v1.VerifyTokenReq
	19, // 10: auth.service.v1.ApiService.GetMe:input_type -> auth.service.v1.VerifyTokenReq
	20, // 11: auth.service.v1.ApiService.GetTokenBySession:input_type -> auth.service.v1.VerifySessionReq
	3,  // 12: auth.service.v1.ApiService.BricamsVerify:input_type -> auth.service.v1.BricamsVerifyReq
	4,  // 13: auth.service.v1.ApiService.BricamsLogin:input_type -> auth.service.v1.BricamsLoginReq
	6,  // 14: auth.service.v1.ApiService.QlolaLogin:input_type -> auth.service.v1.QlolaLoginReq
	6,  // 15: auth.service.v1.ApiService.QlolaLoginV2:input_type -> auth.service.v1.QlolaLoginReq
	21, // 16: auth.service.v1.ApiService.SSOLoginWithInitToken:input_type -> auth.service.v1.InitTokenLoginReqEncrypted
	7,  // 17: auth.service.v1.ApiService.QlolaLogout:input_type -> auth.service.v1.QlolaLogoutReq
	22, // 18: auth.service.v1.ApiService.LoginV2:input_type -> auth.service.v1.LoginV2Request
	23, // 19: auth.service.v1.ApiService.VerifyUserQuestion:input_type -> auth.service.v1.VerifyUserQuestionRequest
	24, // 20: auth.service.v1.ApiService.VerifyChangePasswordToken:input_type -> auth.service.v1.VerifyChangePasswordTokenRequest
	25, // 21: auth.service.v1.ApiService.ForgotPassword:input_type -> auth.service.v1.ForgotPasswordRequest
	26, // 22: auth.service.v1.ApiService.ChangePassword:input_type -> auth.service.v1.ChangePasswordRequest
	6,  // 23: auth.service.v1.ApiService.QlolaTestGenerateSignature:input_type -> auth.service.v1.QlolaLoginReq
	8,  // 24: auth.service.v1.ApiService.QlolaTestSignatureBystring:input_type -> auth.service.v1.SignatureReq
	1,  // 25: auth.service.v1.ApiService.ResetUserLoginTimeAttemptByUserId:input_type -> auth.service.v1.ResetUserLoginTimeAttemptReq
	27, // 26: auth.service.v1.ApiService.RegisterUserIntoAuth:input_type -> auth.service.v1.RegisterUserIntoAuthReq
	28, // 27: auth.service.v1.ApiService.RequestAuthData:input_type -> auth.service.v1.RequestUserId
	26, // 28: auth.service.v1.ApiService.ChangePasswordWithProfile:input_type -> auth.service.v1.ChangePasswordRequest
	27, // 29: auth.service.v1.ApiService.RegisterAddonsUserIntoAuth:input_type -> auth.service.v1.RegisterUserIntoAuthReq
	22, // 30: auth.service.v1.ApiService.QLolaUserValidation:input_type -> auth.service.v1.LoginV2Request
	29, // 31: auth.service.v1.ApiService.QlolaForgotPassword:input_type -> auth.service.v1.QlolaForgotPasswordRequest
	30, // 32: auth.service.v1.ApiService.RollbackAuthenticationByCompanyIdRPC:input_type -> auth.service.v1.RollbackAuthenticationByCompanyIdRPCRequest
	31, // 33: auth.service.v1.ApiService.DeleteAuthenticationByUsersIDAndCompanyIDRPC:input_type -> auth.service.v1.DeleteAuthByUsersIdAndCompanyIdReq
	32, // 34: auth.service.v1.ApiService.InsertHistoryChangePassword:input_type -> auth.service.v1.HistoryChangePassword
	33, // 35: auth.service.v1.ApiService.GetDetailAuthentication:input_type -> auth.service.v1.GetDetailAuthenticationRequest
	34, // 36: auth.service.v1.ApiService.SendEmailNotificationSuccessChangePassword:input_type -> auth.service.v1.PayloadSendMailSuccessChangePassword
	35, // 37: auth.service.v1.ApiService.HealthCheck:output_type -> auth.service.v1.HealthCheckResponse
	36, // 38: auth.service.v1.ApiService.GetSignatureKey:output_type -> auth.service.v1.GetSigKeyResponse
	37, // 39: auth.service.v1.ApiService.Login:output_type -> auth.service.v1.LoginResponse
	12, // 40: auth.service.v1.ApiService.Logout:output_type -> auth.service.v1.Empty
	38, // 41: auth.service.v1.ApiService.RefreshToken:output_type -> auth.service.v1.RefreshResponse
	39, // 42: auth.service.v1.ApiService.GetTokenData:output_type -> auth.service.v1.GetTokenDataResponse
	40, // 43: auth.service.v1.ApiService.DeleteAccessTokenWhenCompanyOrUserStatusChange:output_type -> auth.service.v1.DeleteAccessTokenResponse
	41, // 44: auth.service.v1.ApiService.VerifyToken:output_type -> auth.service.v1.VerifyTokenRes
	42, // 45: auth.service.v1.ApiService.SetMe:output_type -> auth.service.v1.SetMeRes
	43, // 46: auth.service.v1.ApiService.GetMe:output_type -> auth.service.v1.FilteredVerifyTokenRes
	37, // 47: auth.service.v1.ApiService.GetTokenBySession:output_type -> auth.service.v1.LoginResponse
	44, // 48: auth.service.v1.ApiService.BricamsVerify:output_type -> google.api.HttpBody
	37, // 49: auth.service.v1.ApiService.BricamsLogin:output_type -> auth.service.v1.LoginResponse
	45, // 50: auth.service.v1.ApiService.QlolaLogin:output_type -> auth.service.v1.InitLoginResponse
	45, // 51: auth.service.v1.ApiService.QlolaLoginV2:output_type -> auth.service.v1.InitLoginResponse
	46, // 52: auth.service.v1.ApiService.SSOLoginWithInitToken:output_type -> auth.service.v1.SSOLoginResponse
	12, // 53: auth.service.v1.ApiService.QlolaLogout:output_type -> auth.service.v1.Empty
	47, // 54: auth.service.v1.ApiService.LoginV2:output_type -> auth.service.v1.LoginV2Response
	48, // 55: auth.service.v1.ApiService.VerifyUserQuestion:output_type -> auth.service.v1.VerifyUserQuestionResponse
	49, // 56: auth.service.v1.ApiService.VerifyChangePasswordToken:output_type -> auth.service.v1.VerifyChangePasswordTokenResponse
	50, // 57: auth.service.v1.ApiService.ForgotPassword:output_type -> auth.service.v1.ForgotPasswordResponse
	51, // 58: auth.service.v1.ApiService.ChangePassword:output_type -> auth.service.v1.ChangePasswordResponse
	9,  // 59: auth.service.v1.ApiService.QlolaTestGenerateSignature:output_type -> auth.service.v1.QlolaSignatureTestRes
	9,  // 60: auth.service.v1.ApiService.QlolaTestSignatureBystring:output_type -> auth.service.v1.QlolaSignatureTestRes
	2,  // 61: auth.service.v1.ApiService.ResetUserLoginTimeAttemptByUserId:output_type -> auth.service.v1.ResetUserLoginTimeAttemptRes
	52, // 62: auth.service.v1.ApiService.RegisterUserIntoAuth:output_type -> auth.service.v1.RegisterUserIntoAuthRes
	53, // 63: auth.service.v1.ApiService.RequestAuthData:output_type -> auth.service.v1.AuthenticationData
	51, // 64: auth.service.v1.ApiService.ChangePasswordWithProfile:output_type -> auth.service.v1.ChangePasswordResponse
	52, // 65: auth.service.v1.ApiService.RegisterAddonsUserIntoAuth:output_type -> auth.service.v1.RegisterUserIntoAuthRes
	54, // 66: auth.service.v1.ApiService.QLolaUserValidation:output_type -> auth.service.v1.QlolaUserValidationBrigateResponse
	55, // 67: auth.service.v1.ApiService.QlolaForgotPassword:output_type -> auth.service.v1.QlolaForgotPasswordResponse
	40, // 68: auth.service.v1.ApiService.RollbackAuthenticationByCompanyIdRPC:output_type -> auth.service.v1.DeleteAccessTokenResponse
	40, // 69: auth.service.v1.ApiService.DeleteAuthenticationByUsersIDAndCompanyIDRPC:output_type -> auth.service.v1.DeleteAccessTokenResponse
	51, // 70: auth.service.v1.ApiService.InsertHistoryChangePassword:output_type -> auth.service.v1.ChangePasswordResponse
	56, // 71: auth.service.v1.ApiService.GetDetailAuthentication:output_type -> auth.service.v1.GetDetailAuthenticationResponse
	51, // 72: auth.service.v1.ApiService.SendEmailNotificationSuccessChangePassword:output_type -> auth.service.v1.ChangePasswordResponse
	37, // [37:73] is the sub-list for method output_type
	1,  // [1:37] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_auth_service_auth_api_proto_init() }
func file_auth_service_auth_api_proto_init() {
	if File_auth_service_auth_api_proto != nil {
		return
	}
	file_auth_service_auth_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_auth_service_auth_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserLoginTimeAttemptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUserLoginTimeAttemptRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsVerifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QlolaLoginSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QlolaLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QlolaLogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QlolaSignatureTestRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsVerifyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_service_auth_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempGenToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_service_auth_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_service_auth_api_proto_goTypes,
		DependencyIndexes: file_auth_service_auth_api_proto_depIdxs,
		EnumInfos:         file_auth_service_auth_api_proto_enumTypes,
		MessageInfos:      file_auth_service_auth_api_proto_msgTypes,
	}.Build()
	File_auth_service_auth_api_proto = out.File
	file_auth_service_auth_api_proto_rawDesc = nil
	file_auth_service_auth_api_proto_goTypes = nil
	file_auth_service_auth_api_proto_depIdxs = nil
}
